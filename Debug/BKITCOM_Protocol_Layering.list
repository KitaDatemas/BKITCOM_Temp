
BKITCOM_Protocol_Layering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007118  08007118  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007118  08007118  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007118  08007118  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007118  08007118  00008118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800711c  0800711c  0000811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007120  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000060  08007180  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08007180  00009640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127ed  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f2  00000000  00000000  0001b876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e17  00000000  00000000  0001f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ba  00000000  00000000  0001ff4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f7b  00000000  00000000  00038609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e671  00000000  00000000  0004d584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  000dbc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e0b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080070d4 	.word	0x080070d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080070d4 	.word	0x080070d4

0800014c <hw_reboot>:
uint8_t Header_Buffer[4][HEADER_SIZE],
		* Payload_Buffer[4] = {NULL};

HIL_State state = IDLE;

void hw_reboot(Protocol com){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	switch (com) {
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b03      	cmp	r3, #3
 800015c:	d822      	bhi.n	80001a4 <hw_reboot+0x58>
 800015e:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <hw_reboot+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	08000175 	.word	0x08000175
 8000168:	08000181 	.word	0x08000181
 800016c:	0800018d 	.word	0x0800018d
 8000170:	08000199 	.word	0x08000199
		case UART:
			HAL_UART_DeInit(&Com.uart_Handler.uart);
 8000174:	480d      	ldr	r0, [pc, #52]	@ (80001ac <hw_reboot+0x60>)
 8000176:	f005 ffff 	bl	8006178 <HAL_UART_DeInit>
			RS485_init();
 800017a:	f000 f8b5 	bl	80002e8 <RS485_init>
			break;
 800017e:	e012      	b.n	80001a6 <hw_reboot+0x5a>
		case I2C:
			HAL_I2C_DeInit(&Com.i2c_Handler.i2c);
 8000180:	480b      	ldr	r0, [pc, #44]	@ (80001b0 <hw_reboot+0x64>)
 8000182:	f001 ff37 	bl	8001ff4 <HAL_I2C_DeInit>
			i2c_init();
 8000186:	f000 f819 	bl	80001bc <i2c_init>
			break;
 800018a:	e00c      	b.n	80001a6 <hw_reboot+0x5a>
		case SPI:
			HAL_SPI_DeInit(&Com.spi_Handler.spi);
 800018c:	4809      	ldr	r0, [pc, #36]	@ (80001b4 <hw_reboot+0x68>)
 800018e:	f004 fce3 	bl	8004b58 <HAL_SPI_DeInit>
			spi_init();
 8000192:	f000 f83b 	bl	800020c <spi_init>
			break;
 8000196:	e006      	b.n	80001a6 <hw_reboot+0x5a>
		case RS485:
			HAL_UART_DeInit(&Com.RS485_Handler.uart);
 8000198:	4807      	ldr	r0, [pc, #28]	@ (80001b8 <hw_reboot+0x6c>)
 800019a:	f005 ffed 	bl	8006178 <HAL_UART_DeInit>
			RS485_init();
 800019e:	f000 f8a3 	bl	80002e8 <RS485_init>
			break;
 80001a2:	e000      	b.n	80001a6 <hw_reboot+0x5a>
		default:
			return;
 80001a4:	bf00      	nop
	}
}
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	200000d0 	.word	0x200000d0
 80001b0:	20000120 	.word	0x20000120
 80001b4:	2000017c 	.word	0x2000017c
 80001b8:	200001d8 	.word	0x200001d8

080001bc <i2c_init>:

void i2c_init(void){
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	Com.i2c_Handler.i2c.Init.ClockSpeed = 100000;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000200 <i2c_init+0x44>)
 80001c2:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <i2c_init+0x48>)
 80001c4:	659a      	str	r2, [r3, #88]	@ 0x58
	Com.i2c_Handler.i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000200 <i2c_init+0x44>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	65da      	str	r2, [r3, #92]	@ 0x5c
	Com.i2c_Handler.i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <i2c_init+0x44>)
 80001ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001d2:	665a      	str	r2, [r3, #100]	@ 0x64
	Com.i2c_Handler.i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000200 <i2c_init+0x44>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	669a      	str	r2, [r3, #104]	@ 0x68
	Com.i2c_Handler.i2c.Init.OwnAddress2 = 0;
 80001da:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <i2c_init+0x44>)
 80001dc:	2200      	movs	r2, #0
 80001de:	66da      	str	r2, [r3, #108]	@ 0x6c
	Com.i2c_Handler.i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001e0:	4b07      	ldr	r3, [pc, #28]	@ (8000200 <i2c_init+0x44>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	671a      	str	r2, [r3, #112]	@ 0x70
	Com.i2c_Handler.i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001e6:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <i2c_init+0x44>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	675a      	str	r2, [r3, #116]	@ 0x74
	if (HAL_I2C_Init(&Com.i2c_Handler.i2c) != HAL_OK)
 80001ec:	4806      	ldr	r0, [pc, #24]	@ (8000208 <i2c_init+0x4c>)
 80001ee:	f001 fdbd 	bl	8001d6c <HAL_I2C_Init>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <i2c_init+0x40>
	{
		Error_Handler();
 80001f8:	f000 fd2e 	bl	8000c58 <Error_Handler>
	}
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200000cc 	.word	0x200000cc
 8000204:	000186a0 	.word	0x000186a0
 8000208:	20000120 	.word	0x20000120

0800020c <spi_init>:


void spi_init(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	Com.spi_Handler.spi.Init.Direction = SPI_DIRECTION_2LINES;
 8000210:	4b1c      	ldr	r3, [pc, #112]	@ (8000284 <spi_init+0x78>)
 8000212:	2200      	movs	r2, #0
 8000214:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Com.spi_Handler.spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8000218:	4b1a      	ldr	r3, [pc, #104]	@ (8000284 <spi_init+0x78>)
 800021a:	2200      	movs	r2, #0
 800021c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Com.spi_Handler.spi.Init.CLKPolarity = Com.spi_Handler.CPOL;
 8000220:	4b18      	ldr	r3, [pc, #96]	@ (8000284 <spi_init+0x78>)
 8000222:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8000226:	461a      	mov	r2, r3
 8000228:	4b16      	ldr	r3, [pc, #88]	@ (8000284 <spi_init+0x78>)
 800022a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Com.spi_Handler.spi.Init.CLKPhase = Com.spi_Handler.CPHA;
 800022e:	4b15      	ldr	r3, [pc, #84]	@ (8000284 <spi_init+0x78>)
 8000230:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8000234:	461a      	mov	r2, r3
 8000236:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <spi_init+0x78>)
 8000238:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	Com.spi_Handler.spi.Init.NSS = SPI_NSS_SOFT;
 800023c:	4b11      	ldr	r3, [pc, #68]	@ (8000284 <spi_init+0x78>)
 800023e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000242:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	Com.spi_Handler.spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000246:	4b0f      	ldr	r3, [pc, #60]	@ (8000284 <spi_init+0x78>)
 8000248:	2200      	movs	r2, #0
 800024a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	Com.spi_Handler.spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800024e:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <spi_init+0x78>)
 8000250:	2200      	movs	r2, #0
 8000252:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	Com.spi_Handler.spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <spi_init+0x78>)
 8000258:	2200      	movs	r2, #0
 800025a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	Com.spi_Handler.spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800025e:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <spi_init+0x78>)
 8000260:	2200      	movs	r2, #0
 8000262:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	Com.spi_Handler.spi.Init.CRCPolynomial = 10;
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <spi_init+0x78>)
 8000268:	220a      	movs	r2, #10
 800026a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	if (HAL_SPI_Init(&Com.spi_Handler.spi) != HAL_OK)
 800026e:	4806      	ldr	r0, [pc, #24]	@ (8000288 <spi_init+0x7c>)
 8000270:	f004 fbee 	bl	8004a50 <HAL_SPI_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <spi_init+0x72>
	{
		Error_Handler();
 800027a:	f000 fced 	bl	8000c58 <Error_Handler>
	}
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000cc 	.word	0x200000cc
 8000288:	2000017c 	.word	0x2000017c

0800028c <uart_init>:

void uart_init(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	Com.uart_Handler.uart.Init.BaudRate = Com.uart_Handler.baudrate;
 8000292:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <uart_init+0x54>)
 8000294:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000298:	461a      	mov	r2, r3
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <uart_init+0x54>)
 800029c:	609a      	str	r2, [r3, #8]
	Com.uart_Handler.uart.Init.WordLength = UART_WORDLENGTH_8B;
 800029e:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <uart_init+0x54>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
	Com.uart_Handler.uart.Init.StopBits = UART_STOPBITS_1;
 80002a4:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <uart_init+0x54>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
	Com.uart_Handler.uart.Init.Parity = UART_PARITY_NONE;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <uart_init+0x54>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
	Com.uart_Handler.uart.Init.Mode = UART_MODE_TX_RX;
 80002b0:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <uart_init+0x54>)
 80002b2:	220c      	movs	r2, #12
 80002b4:	619a      	str	r2, [r3, #24]
	Com.uart_Handler.uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <uart_init+0x54>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	61da      	str	r2, [r3, #28]
	Com.uart_Handler.uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <uart_init+0x54>)
 80002be:	2200      	movs	r2, #0
 80002c0:	621a      	str	r2, [r3, #32]
	HAL_StatusTypeDef error_code = HAL_UART_Init(&Com.uart_Handler.uart);
 80002c2:	4808      	ldr	r0, [pc, #32]	@ (80002e4 <uart_init+0x58>)
 80002c4:	f005 ff08 	bl	80060d8 <HAL_UART_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	71fb      	strb	r3, [r7, #7]
	if (error_code != HAL_OK)
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <uart_init+0x4a>
	{
		Error_Handler();
 80002d2:	f000 fcc1 	bl	8000c58 <Error_Handler>
	}
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	200000cc 	.word	0x200000cc
 80002e4:	200000d0 	.word	0x200000d0

080002e8 <RS485_init>:

void RS485_init(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	Com.RS485_Handler.uart.Init.BaudRate = Com.RS485_Handler.baudrate;
 80002ec:	4b13      	ldr	r3, [pc, #76]	@ (800033c <RS485_init+0x54>)
 80002ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80002f2:	4a12      	ldr	r2, [pc, #72]	@ (800033c <RS485_init+0x54>)
 80002f4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
	Com.RS485_Handler.uart.Init.WordLength = UART_WORDLENGTH_8B;
 80002f8:	4b10      	ldr	r3, [pc, #64]	@ (800033c <RS485_init+0x54>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	Com.RS485_Handler.uart.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <RS485_init+0x54>)
 8000302:	2200      	movs	r2, #0
 8000304:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	Com.RS485_Handler.uart.Init.Parity = UART_PARITY_NONE;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <RS485_init+0x54>)
 800030a:	2200      	movs	r2, #0
 800030c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	Com.RS485_Handler.uart.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <RS485_init+0x54>)
 8000312:	220c      	movs	r2, #12
 8000314:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	Com.RS485_Handler.uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <RS485_init+0x54>)
 800031a:	2200      	movs	r2, #0
 800031c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	Com.RS485_Handler.uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <RS485_init+0x54>)
 8000322:	2200      	movs	r2, #0
 8000324:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	if (HAL_UART_Init(&Com.RS485_Handler.uart) != HAL_OK)
 8000328:	4805      	ldr	r0, [pc, #20]	@ (8000340 <RS485_init+0x58>)
 800032a:	f005 fed5 	bl	80060d8 <HAL_UART_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <RS485_init+0x50>
	{
		Error_Handler();
 8000334:	f000 fc90 	bl	8000c58 <Error_Handler>
	}
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000cc 	.word	0x200000cc
 8000340:	200001d8 	.word	0x200001d8

08000344 <hw_tim_init>:

void hw_tim_init(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]

	  hw_tim.Instance = TIM2;
 8000360:	4b20      	ldr	r3, [pc, #128]	@ (80003e4 <hw_tim_init+0xa0>)
 8000362:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000366:	601a      	str	r2, [r3, #0]
	  hw_tim.Init.Prescaler = 35999;
 8000368:	4b1e      	ldr	r3, [pc, #120]	@ (80003e4 <hw_tim_init+0xa0>)
 800036a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800036e:	605a      	str	r2, [r3, #4]
	  hw_tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b1c      	ldr	r3, [pc, #112]	@ (80003e4 <hw_tim_init+0xa0>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
	  hw_tim.Init.Period = 1;
 8000376:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <hw_tim_init+0xa0>)
 8000378:	2201      	movs	r2, #1
 800037a:	60da      	str	r2, [r3, #12]
	  hw_tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b19      	ldr	r3, [pc, #100]	@ (80003e4 <hw_tim_init+0xa0>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
	  hw_tim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <hw_tim_init+0xa0>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&hw_tim) != HAL_OK)
 8000388:	4816      	ldr	r0, [pc, #88]	@ (80003e4 <hw_tim_init+0xa0>)
 800038a:	f005 fab4 	bl	80058f6 <HAL_TIM_Base_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <hw_tim_init+0x54>
	  {
	    Error_Handler();
 8000394:	f000 fc60 	bl	8000c58 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039c:	60bb      	str	r3, [r7, #8]
	  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
	  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
	  sClockSourceConfig.ClockFilter = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_ConfigClockSource(&hw_tim, &sClockSourceConfig) != HAL_OK)
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	480c      	ldr	r0, [pc, #48]	@ (80003e4 <hw_tim_init+0xa0>)
 80003b2:	f005 fc31 	bl	8005c18 <HAL_TIM_ConfigClockSource>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <hw_tim_init+0x7c>
	  {
	    Error_Handler();
 80003bc:	f000 fc4c 	bl	8000c58 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c0:	2300      	movs	r3, #0
 80003c2:	603b      	str	r3, [r7, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&hw_tim, &sMasterConfig) != HAL_OK)
 80003c8:	463b      	mov	r3, r7
 80003ca:	4619      	mov	r1, r3
 80003cc:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <hw_tim_init+0xa0>)
 80003ce:	f005 fe13 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <hw_tim_init+0x98>
	  {
	    Error_Handler();
 80003d8:	f000 fc3e 	bl	8000c58 <Error_Handler>
	  }
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000080 	.word	0x20000080

080003e8 <slave_init>:

void slave_init(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if (uart_en)	hw_receive((Protocol)UART, Header_Buffer[(Protocol)UART], HEADER_SIZE, 0);
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <slave_init+0x44>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <slave_init+0x18>
 80003f4:	2300      	movs	r3, #0
 80003f6:	2210      	movs	r2, #16
 80003f8:	490d      	ldr	r1, [pc, #52]	@ (8000430 <slave_init+0x48>)
 80003fa:	2000      	movs	r0, #0
 80003fc:	f000 f922 	bl	8000644 <hw_receive>
	if (i2c_en)		hw_receive((Protocol)I2C, Header_Buffer[(Protocol)I2C], HEADER_SIZE, 0);
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <slave_init+0x4c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d005      	beq.n	8000414 <slave_init+0x2c>
 8000408:	2300      	movs	r3, #0
 800040a:	2210      	movs	r2, #16
 800040c:	490a      	ldr	r1, [pc, #40]	@ (8000438 <slave_init+0x50>)
 800040e:	2001      	movs	r0, #1
 8000410:	f000 f918 	bl	8000644 <hw_receive>
	if (spi_en)		hw_receive((Protocol)SPI, Header_Buffer[(Protocol)SPI], HEADER_SIZE, 0);
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <slave_init+0x54>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d005      	beq.n	8000428 <slave_init+0x40>
 800041c:	2300      	movs	r3, #0
 800041e:	2210      	movs	r2, #16
 8000420:	4907      	ldr	r1, [pc, #28]	@ (8000440 <slave_init+0x58>)
 8000422:	2002      	movs	r0, #2
 8000424:	f000 f90e 	bl	8000644 <hw_receive>
	if (RS485_en){
		/*Preserved for future use*/
	}
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000007e 	.word	0x2000007e
 8000430:	2000022c 	.word	0x2000022c
 8000434:	2000007c 	.word	0x2000007c
 8000438:	2000023c 	.word	0x2000023c
 800043c:	2000007d 	.word	0x2000007d
 8000440:	2000024c 	.word	0x2000024c

08000444 <hw_init>:
/**
  * @brief	Initialize all the protocols that STM32 has (UART, I2C, SPI, ...)
  * @param	Role: Specify the protocol role
  * @retval	NONE
  */
void hw_init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	uint8_t isSlaveCongig = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	71fb      	strb	r3, [r7, #7]

	hw_tim_init();
 800044e:	f7ff ff79 	bl	8000344 <hw_tim_init>

	if (i2c_en) {
 8000452:	4b1f      	ldr	r3, [pc, #124]	@ (80004d0 <hw_init+0x8c>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <hw_init+0x28>
		i2c_init();
 800045a:	f7ff feaf 	bl	80001bc <i2c_init>
		if (Com.i2c_Handler.i2c_role == BKITCOM_SLAVE)		isSlaveCongig = 1;
 800045e:	4b1d      	ldr	r3, [pc, #116]	@ (80004d4 <hw_init+0x90>)
 8000460:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000464:	2b01      	cmp	r3, #1
 8000466:	d101      	bne.n	800046c <hw_init+0x28>
 8000468:	2301      	movs	r3, #1
 800046a:	71fb      	strb	r3, [r7, #7]
	}

	if (spi_en) {
 800046c:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <hw_init+0x94>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <hw_init+0x42>
		spi_init();
 8000474:	f7ff feca 	bl	800020c <spi_init>
		if (Com.spi_Handler.spi_role == BKITCOM_SLAVE)		isSlaveCongig = 1;
 8000478:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <hw_init+0x90>)
 800047a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800047e:	2b01      	cmp	r3, #1
 8000480:	d101      	bne.n	8000486 <hw_init+0x42>
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
	}

	if (uart_en) {
 8000486:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <hw_init+0x98>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d007      	beq.n	800049e <hw_init+0x5a>
		uart_init();
 800048e:	f7ff fefd 	bl	800028c <uart_init>
		if (Com.uart_Handler.uart_role == BKITCOM_SLAVE)		isSlaveCongig = 1;
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <hw_init+0x90>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d101      	bne.n	800049e <hw_init+0x5a>
 800049a:	2301      	movs	r3, #1
 800049c:	71fb      	strb	r3, [r7, #7]
	}

	if (RS485_en) {
 800049e:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <hw_init+0x9c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <hw_init+0x74>
		RS485_init();
 80004a6:	f7ff ff1f 	bl	80002e8 <RS485_init>
		if (Com.RS485_Handler.RS485_role == BKITCOM_SLAVE)		isSlaveCongig = 1;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <hw_init+0x90>)
 80004ac:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d101      	bne.n	80004b8 <hw_init+0x74>
 80004b4:	2301      	movs	r3, #1
 80004b6:	71fb      	strb	r3, [r7, #7]
	}

	if (isSlaveCongig)		slave_init();
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <hw_init+0x7e>
 80004be:	f7ff ff93 	bl	80003e8 <slave_init>

	timerInit(&hw_tim);
 80004c2:	4808      	ldr	r0, [pc, #32]	@ (80004e4 <hw_init+0xa0>)
 80004c4:	f000 fbce 	bl	8000c64 <timerInit>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000007c 	.word	0x2000007c
 80004d4:	200000cc 	.word	0x200000cc
 80004d8:	2000007d 	.word	0x2000007d
 80004dc:	2000007e 	.word	0x2000007e
 80004e0:	2000007f 	.word	0x2000007f
 80004e4:	20000080 	.word	0x20000080

080004e8 <uart_config>:
	Com.spi_Handler.CPHA = CPHA;
	spi_en = 1;
	return BKITCOM_SUCCESS;
}

BKITCOM_Error_Code uart_config (uint8_t uart_x, uint32_t baudrate, BKITCOM_Role_type_t role) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	Com.uart_Handler.uart_role = role;
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <uart_config+0x64>)
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	7013      	strb	r3, [r2, #0]

	switch (uart_x) {
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d00e      	beq.n	8000522 <uart_config+0x3a>
 8000504:	2b03      	cmp	r3, #3
 8000506:	dc10      	bgt.n	800052a <uart_config+0x42>
 8000508:	2b01      	cmp	r3, #1
 800050a:	d002      	beq.n	8000512 <uart_config+0x2a>
 800050c:	2b02      	cmp	r3, #2
 800050e:	d004      	beq.n	800051a <uart_config+0x32>
 8000510:	e00b      	b.n	800052a <uart_config+0x42>
		case 1:
			Com.uart_Handler.uart.Instance = USART1;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <uart_config+0x64>)
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <uart_config+0x68>)
 8000516:	605a      	str	r2, [r3, #4]
			break;
 8000518:	e009      	b.n	800052e <uart_config+0x46>
		case 2:
			Com.uart_Handler.uart.Instance = USART2;
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <uart_config+0x64>)
 800051c:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <uart_config+0x6c>)
 800051e:	605a      	str	r2, [r3, #4]
			break;
 8000520:	e005      	b.n	800052e <uart_config+0x46>
		case 3:
			Com.uart_Handler.uart.Instance = USART3;
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <uart_config+0x64>)
 8000524:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <uart_config+0x70>)
 8000526:	605a      	str	r2, [r3, #4]
			break;
 8000528:	e001      	b.n	800052e <uart_config+0x46>
		default:
			return BKITCOM_INVALID;
 800052a:	2306      	movs	r3, #6
 800052c:	e008      	b.n	8000540 <uart_config+0x58>
	}
	Com.uart_Handler.baudrate = baudrate;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b29a      	uxth	r2, r3
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <uart_config+0x64>)
 8000534:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	uart_en = 1;
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <uart_config+0x74>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
	return BKITCOM_SUCCESS;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200000cc 	.word	0x200000cc
 8000550:	40013800 	.word	0x40013800
 8000554:	40004400 	.word	0x40004400
 8000558:	40004800 	.word	0x40004800
 800055c:	2000007e 	.word	0x2000007e

08000560 <ErrorCode_Handler>:
	RS485_en = 1;
	return BKITCOM_SUCCESS;
}


BKITCOM_Error_Code ErrorCode_Handler (HAL_StatusTypeDef Error_Code) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	switch (Error_Code) {
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d85c      	bhi.n	800062a <ErrorCode_Handler+0xca>
 8000570:	a201      	add	r2, pc, #4	@ (adr r2, 8000578 <ErrorCode_Handler+0x18>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	08000589 	.word	0x08000589
 800057c:	08000595 	.word	0x08000595
 8000580:	0800058d 	.word	0x0800058d
 8000584:	08000591 	.word	0x08000591
	case HAL_OK:
		return BKITCOM_SUCCESS;
 8000588:	2300      	movs	r3, #0
 800058a:	e04e      	b.n	800062a <ErrorCode_Handler+0xca>
	case HAL_BUSY:
		return BKITCOM_BUSY;
 800058c:	2301      	movs	r3, #1
 800058e:	e04c      	b.n	800062a <ErrorCode_Handler+0xca>
	case HAL_TIMEOUT:
		return BKITCOM_TIMEOUT;
 8000590:	2302      	movs	r3, #2
 8000592:	e04a      	b.n	800062a <ErrorCode_Handler+0xca>
	case HAL_ERROR:
		switch (Com_Send_Signal) {
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <ErrorCode_Handler+0xd4>)
 8000596:	f993 3000 	ldrsb.w	r3, [r3]
 800059a:	2b03      	cmp	r3, #3
 800059c:	d83e      	bhi.n	800061c <ErrorCode_Handler+0xbc>
 800059e:	a201      	add	r2, pc, #4	@ (adr r2, 80005a4 <ErrorCode_Handler+0x44>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005cf 	.word	0x080005cf
 80005ac:	080005e9 	.word	0x080005e9
 80005b0:	0800061d 	.word	0x0800061d
		case UART:
			Error_Code = HAL_UART_GetError(&Com.uart_Handler.uart);
 80005b4:	4820      	ldr	r0, [pc, #128]	@ (8000638 <ErrorCode_Handler+0xd8>)
 80005b6:	f006 f97c 	bl	80068b2 <HAL_UART_GetError>
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
			if (Error_Code == HAL_UART_ERROR_ORE) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d12d      	bne.n	8000620 <ErrorCode_Handler+0xc0>
				hw_reboot(UART);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fdc1 	bl	800014c <hw_reboot>
				return BKITCOM_OVERRUN;
 80005ca:	2304      	movs	r3, #4
 80005cc:	e02d      	b.n	800062a <ErrorCode_Handler+0xca>
			}
			break;
		case I2C:
			Error_Code = HAL_I2C_GetError(&Com.i2c_Handler.i2c);
 80005ce:	481b      	ldr	r0, [pc, #108]	@ (800063c <ErrorCode_Handler+0xdc>)
 80005d0:	f002 f9d6 	bl	8002980 <HAL_I2C_GetError>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71fb      	strb	r3, [r7, #7]
			if (Error_Code == HAL_I2C_ERROR_ARLO) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d122      	bne.n	8000624 <ErrorCode_Handler+0xc4>
				hw_reboot(I2C);
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff fdb4 	bl	800014c <hw_reboot>
				return BKITCOM_I2C_COLLISION;
 80005e4:	2303      	movs	r3, #3
 80005e6:	e020      	b.n	800062a <ErrorCode_Handler+0xca>
			}
			break;
		case SPI:
			Error_Code = HAL_SPI_GetError(&Com.spi_Handler.spi);
 80005e8:	4815      	ldr	r0, [pc, #84]	@ (8000640 <ErrorCode_Handler+0xe0>)
 80005ea:	f004 fe9d 	bl	8005328 <HAL_SPI_GetError>
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
			if (Error_Code == HAL_SPI_ERROR_MODF) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d104      	bne.n	8000602 <ErrorCode_Handler+0xa2>
				/*Incorrect SPI clock polarity/phase*/
				hw_reboot(SPI);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f7ff fda7 	bl	800014c <hw_reboot>
				return BKITCOM_INVALID_CLOCK_PHASE_POLARITY;
 80005fe:	2305      	movs	r3, #5
 8000600:	e013      	b.n	800062a <ErrorCode_Handler+0xca>
			}
			if (Error_Code == HAL_SPI_ERROR_OVR) {
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d104      	bne.n	8000612 <ErrorCode_Handler+0xb2>
				hw_reboot(SPI);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fd9f 	bl	800014c <hw_reboot>
				return BKITCOM_OVERRUN;
 800060e:	2304      	movs	r3, #4
 8000610:	e00b      	b.n	800062a <ErrorCode_Handler+0xca>
			}
			if (Error_Code == HAL_SPI_ERROR_ABORT) {
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b40      	cmp	r3, #64	@ 0x40
 8000616:	d107      	bne.n	8000628 <ErrorCode_Handler+0xc8>
				/*Abort arise when the SPI connection is lost, reconnect required*/
				return BKITCOM_ABORT;
 8000618:	2308      	movs	r3, #8
 800061a:	e006      	b.n	800062a <ErrorCode_Handler+0xca>
			}
			break;
		case RS485:
			break;
		default:
			break;
 800061c:	bf00      	nop
 800061e:	e004      	b.n	800062a <ErrorCode_Handler+0xca>
			break;
 8000620:	bf00      	nop
 8000622:	e002      	b.n	800062a <ErrorCode_Handler+0xca>
			break;
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <ErrorCode_Handler+0xca>
			break;
 8000628:	bf00      	nop
		}
	}
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
 8000638:	200000d0 	.word	0x200000d0
 800063c:	20000120 	.word	0x20000120
 8000640:	2000017c 	.word	0x2000017c

08000644 <hw_receive>:
		Com_Send_Signal = NONE;
		HAL_Delay(10);
		return code;
}

BKITCOM_Error_Code hw_receive(Protocol com, uint8_t * data, uint8_t data_length, uint32_t timeout){
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af02      	add	r7, sp, #8
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4603      	mov	r3, r0
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	4613      	mov	r3, r2
 8000654:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef Error_Code;
	if (data_length < 0)			return BKITCOM_INVALID;
	timeout = (timeout == 0)? RECEIVE_TIMEOUT : timeout;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <hw_receive+0x1c>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	e001      	b.n	8000664 <hw_receive+0x20>
 8000660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000664:	607b      	str	r3, [r7, #4]

	switch (com) {
 8000666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d871      	bhi.n	8000752 <hw_receive+0x10e>
 800066e:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <hw_receive+0x30>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000685 	.word	0x08000685
 8000678:	08000707 	.word	0x08000707
 800067c:	080006bd 	.word	0x080006bd
 8000680:	08000753 	.word	0x08000753
		case UART:
			/*This is for ensure that the master only call with timeout and slave can do something else while waiting for data*/
			if (Com.uart_Handler.uart_role == BKITCOM_MASTER) {
 8000684:	4b38      	ldr	r3, [pc, #224]	@ (8000768 <hw_receive+0x124>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d109      	bne.n	80006a0 <hw_receive+0x5c>
				Error_Code = HAL_UART_Receive(&Com.uart_Handler.uart, data, data_length, timeout);
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	4835      	ldr	r0, [pc, #212]	@ (800076c <hw_receive+0x128>)
 8000696:	f005 fda1 	bl	80061dc <HAL_UART_Receive>
 800069a:	4603      	mov	r3, r0
 800069c:	77fb      	strb	r3, [r7, #31]
			}
			else	{
				count = 404;
				Error_Code = HAL_UART_Receive_IT(&Com.uart_Handler.uart, data, data_length);
			}
			break;
 800069e:	e059      	b.n	8000754 <hw_receive+0x110>
				count = 404;
 80006a0:	4b33      	ldr	r3, [pc, #204]	@ (8000770 <hw_receive+0x12c>)
 80006a2:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 80006a6:	601a      	str	r2, [r3, #0]
				Error_Code = HAL_UART_Receive_IT(&Com.uart_Handler.uart, data, data_length);
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	482e      	ldr	r0, [pc, #184]	@ (800076c <hw_receive+0x128>)
 80006b2:	f005 fe2a 	bl	800630a <HAL_UART_Receive_IT>
 80006b6:	4603      	mov	r3, r0
 80006b8:	77fb      	strb	r3, [r7, #31]
			break;
 80006ba:	e04b      	b.n	8000754 <hw_receive+0x110>

		case SPI:
			if (Com.spi_Handler.spi_role == BKITCOM_MASTER) {
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <hw_receive+0x124>)
 80006be:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d115      	bne.n	80006f2 <hw_receive+0xae>
				uint8_t * dummyData = malloc(sizeof(uint8_t) * data_length);
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f006 fbb9 	bl	8006e40 <malloc>
 80006ce:	4603      	mov	r3, r0
 80006d0:	61bb      	str	r3, [r7, #24]
				Error_Code = HAL_SPI_TransmitReceive(&Com.spi_Handler.spi, dummyData, data, data_length, timeout);
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	4613      	mov	r3, r2
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	69b9      	ldr	r1, [r7, #24]
 80006e0:	4824      	ldr	r0, [pc, #144]	@ (8000774 <hw_receive+0x130>)
 80006e2:	f004 fa61 	bl	8004ba8 <HAL_SPI_TransmitReceive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	77fb      	strb	r3, [r7, #31]
				free(dummyData);
 80006ea:	69b8      	ldr	r0, [r7, #24]
 80006ec:	f006 fbb0 	bl	8006e50 <free>
			}
			else 	Error_Code = HAL_SPI_Receive_IT(&Com.spi_Handler.spi, data, data_length);
			break;
 80006f0:	e030      	b.n	8000754 <hw_receive+0x110>
			else 	Error_Code = HAL_SPI_Receive_IT(&Com.spi_Handler.spi, data, data_length);
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	481e      	ldr	r0, [pc, #120]	@ (8000774 <hw_receive+0x130>)
 80006fc:	f004 fbfe 	bl	8004efc <HAL_SPI_Receive_IT>
 8000700:	4603      	mov	r3, r0
 8000702:	77fb      	strb	r3, [r7, #31]
			break;
 8000704:	e026      	b.n	8000754 <hw_receive+0x110>

		case I2C:
			if (Com.i2c_Handler.i2c_role == BKITCOM_MASTER) {
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <hw_receive+0x124>)
 8000708:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800070c:	2b00      	cmp	r3, #0
 800070e:	d116      	bne.n	800073e <hw_receive+0xfa>
				uint8_t * dummyData = malloc(sizeof(uint8_t) * data_length);
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fb94 	bl	8006e40 <malloc>
 8000718:	4603      	mov	r3, r0
 800071a:	617b      	str	r3, [r7, #20]
				Error_Code = HAL_I2C_Master_Receive(&Com.i2c_Handler.i2c, prev_i2c_slave_address, dummyData, data_length, 1000);
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <hw_receive+0x134>)
 800071e:	8819      	ldrh	r1, [r3, #0]
 8000720:	7bbb      	ldrb	r3, [r7, #14]
 8000722:	b29b      	uxth	r3, r3
 8000724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000728:	9200      	str	r2, [sp, #0]
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	4813      	ldr	r0, [pc, #76]	@ (800077c <hw_receive+0x138>)
 800072e:	f001 fca5 	bl	800207c <HAL_I2C_Master_Receive>
 8000732:	4603      	mov	r3, r0
 8000734:	77fb      	strb	r3, [r7, #31]
				free(dummyData);
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f006 fb8a 	bl	8006e50 <free>
			} else 	Error_Code = HAL_I2C_Slave_Receive_IT(&Com.i2c_Handler.i2c, data, data_length);
			break;
 800073c:	e00a      	b.n	8000754 <hw_receive+0x110>
			} else 	Error_Code = HAL_I2C_Slave_Receive_IT(&Com.i2c_Handler.i2c, data, data_length);
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	b29b      	uxth	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <hw_receive+0x138>)
 8000748:	f001 ff04 	bl	8002554 <HAL_I2C_Slave_Receive_IT>
 800074c:	4603      	mov	r3, r0
 800074e:	77fb      	strb	r3, [r7, #31]
			break;
 8000750:	e000      	b.n	8000754 <hw_receive+0x110>

		case RS485:
			break;

		default:
			break;
 8000752:	bf00      	nop
	}
	return ErrorCode_Handler(Error_Code);
 8000754:	7ffb      	ldrb	r3, [r7, #31]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff02 	bl	8000560 <ErrorCode_Handler>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000cc 	.word	0x200000cc
 800076c:	200000d0 	.word	0x200000d0
 8000770:	20000228 	.word	0x20000228
 8000774:	2000017c 	.word	0x2000017c
 8000778:	200000ca 	.word	0x200000ca
 800077c:	20000120 	.word	0x20000120

08000780 <HAL_UART_RxCpltCallback>:
		break;
	}
}

/*Callback function definition*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	count++;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_UART_RxCpltCallback+0x24>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <HAL_UART_RxCpltCallback+0x24>)
 8000790:	6013      	str	r3, [r2, #0]
	Com_Receive_Signal = UART;
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_UART_RxCpltCallback+0x28>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000228 	.word	0x20000228
 80007a8:	20000001 	.word	0x20000001

080007ac <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	Com_Receive_Signal = I2C;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <HAL_I2C_SlaveRxCpltCallback+0x18>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000001 	.word	0x20000001

080007c8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	Com_Receive_Signal = SPI;
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <HAL_SPI_RxCpltCallback+0x18>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000001 	.word	0x20000001

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fe06 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f82e 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 f9da 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007f4:	f000 f870 	bl	80008d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007f8:	f000 f89c 	bl	8000934 <MX_I2C2_Init>
  MX_SPI1_Init();
 80007fc:	f000 f8c8 	bl	8000990 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000800:	f000 f8fc 	bl	80009fc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000804:	f000 f97c 	bl	8000b00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000808:	f000 f9a4 	bl	8000b54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800080c:	f000 f92c 	bl	8000a68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uart_config(1, 9600, BKITCOM_SLAVE);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff fe66 	bl	80004e8 <uart_config>
  hw_init();
 800081c:	f7ff fe12 	bl	8000444 <hw_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 if (Received_Flag == 1) {
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <main+0x60>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d106      	bne.n	8000836 <main+0x52>
		 HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <main+0x64>)
 8000830:	f001 fa84 	bl	8001d3c <HAL_GPIO_WritePin>
 8000834:	e7f4      	b.n	8000820 <main+0x3c>
	 } else {
		 HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800083c:	4802      	ldr	r0, [pc, #8]	@ (8000848 <main+0x64>)
 800083e:	f001 fa7d 	bl	8001d3c <HAL_GPIO_WritePin>
	 if (Received_Flag == 1) {
 8000842:	e7ed      	b.n	8000820 <main+0x3c>
 8000844:	200000c8 	.word	0x200000c8
 8000848:	40011000 	.word	0x40011000

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	@ 0x40
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2228      	movs	r2, #40	@ 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f006 fbae 	bl	8006fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800088a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fccb 	bl	8004230 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008a0:	f000 f9da 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 ff38 	bl	8004734 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008ca:	f000 f9c5 	bl	8000c58 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3740      	adds	r7, #64	@ 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008de:	4a13      	ldr	r2, [pc, #76]	@ (800092c <MX_I2C1_Init+0x54>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_I2C1_Init+0x58>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_I2C1_Init+0x50>)
 8000916:	f001 fa29 	bl	8001d6c <HAL_I2C_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 f99a 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000026c 	.word	0x2000026c
 800092c:	40005400 	.word	0x40005400
 8000930:	000186a0 	.word	0x000186a0

08000934 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C2_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C2_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C2_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C2_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C2_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C2_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C2_Init+0x50>)
 8000972:	f001 f9fb 	bl	8001d6c <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 f96c 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200002c0 	.word	0x200002c0
 8000988:	40005800 	.word	0x40005800
 800098c:	000186a0 	.word	0x000186a0

08000990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_SPI1_Init+0x64>)
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <MX_SPI1_Init+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009dc:	220a      	movs	r2, #10
 80009de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_SPI1_Init+0x64>)
 80009e2:	f004 f835 	bl	8004a50 <HAL_SPI_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ec:	f000 f934 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000314 	.word	0x20000314
 80009f8:	40013000 	.word	0x40013000

080009fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <MX_SPI2_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <MX_SPI2_Init+0x64>)
 8000a4e:	f003 ffff 	bl	8004a50 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a58:	f000 f8fe 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000036c 	.word	0x2000036c
 8000a64:	40003800 	.word	0x40003800

08000a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000a8e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000aae:	f004 ff22 	bl	80058f6 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ab8:	f000 f8ce 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000aca:	f005 f8a5 	bl	8005c18 <HAL_TIM_ConfigClockSource>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad4:	f000 f8c0 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_TIM2_Init+0x94>)
 8000ae6:	f005 fa87 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f8b2 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200003c4 	.word	0x200003c4

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f005 face 	bl	80060d8 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f889 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000040c 	.word	0x2000040c
 8000b50:	40013800 	.word	0x40013800

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f005 faa4 	bl	80060d8 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f85f 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000454 	.word	0x20000454
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a23      	ldr	r2, [pc, #140]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a11      	ldr	r2, [pc, #68]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_GPIO_Init+0xa8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c22:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_GPIO_Init+0xac>)
 8000c24:	f001 f88a 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_GPIO_Init+0xac>)
 8000c42:	f000 fe3b 	bl	80018bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3720      	adds	r7, #32
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40011000 	.word	0x40011000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <timerInit>:
#include "softwareTimer.h"

TIM_HandleTypeDef * tim;
uint32_t timerCount [NB_OF_TIMERS], timerFlag [NB_OF_TIMERS];

void timerInit(TIM_HandleTypeDef * htim) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	tim = htim;
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <timerInit+0x20>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(tim);
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <timerInit+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 fe8c 	bl	8005994 <HAL_TIM_Base_Start_IT>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000049c 	.word	0x2000049c

08000c88 <timerRun>:
	timerTick [timer] = 0;
	timerCount [timer] = duration / NB_OF_TIMERS;
	timerFlag [timer] = 0;
}

void timerRun(void) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
	for (int timerIdx = 0; timerIdx < NB_OF_TIMERS; timerIdx++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	e01c      	b.n	8000cce <timerRun+0x46>
		if (timerCount[timerIdx] > 0) {
 8000c94:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <timerRun+0x58>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <timerRun+0x40>
			if (--timerCount[timerIdx] == 0) {
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <timerRun+0x58>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <timerRun+0x58>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <timerRun+0x58>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <timerRun+0x40>
				timerFlag[timerIdx] = 1;
 8000cbe:	4a09      	ldr	r2, [pc, #36]	@ (8000ce4 <timerRun+0x5c>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int timerIdx = 0; timerIdx < NB_OF_TIMERS; timerIdx++) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b09      	cmp	r3, #9
 8000cd2:	dddf      	ble.n	8000c94 <timerRun+0xc>
			}
		}

	}
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	200004a0 	.word	0x200004a0
 8000ce4:	200004c8 	.word	0x200004c8

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
uint8_t checkTimerFlag (uint32_t timer) {
	if (timer < 0 || timer >= NB_OF_TIMERS)			return 0;
	return timerFlag [timer];
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cf0:	f7ff ffca 	bl	8000c88 <timerRun>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_MspInit+0x60>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_MspInit+0x60>)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a33      	ldr	r2, [pc, #204]	@ (8000e48 <HAL_I2C_MspInit+0xe8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d12c      	bne.n	8000dda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b32      	ldr	r3, [pc, #200]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a31      	ldr	r2, [pc, #196]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d98:	23c0      	movs	r3, #192	@ 0xc0
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4829      	ldr	r0, [pc, #164]	@ (8000e50 <HAL_I2C_MspInit+0xf0>)
 8000dac:	f000 fd86 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db0:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4a25      	ldr	r2, [pc, #148]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dba:	61d3      	str	r3, [r2, #28]
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	201f      	movs	r0, #31
 8000dce:	f000 fc70 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000dd2:	201f      	movs	r0, #31
 8000dd4:	f000 fc89 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dd8:	e031      	b.n	8000e3e <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	@ (8000e54 <HAL_I2C_MspInit+0xf4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d12c      	bne.n	8000e3e <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dfc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e02:	2312      	movs	r3, #18
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480f      	ldr	r0, [pc, #60]	@ (8000e50 <HAL_I2C_MspInit+0xf0>)
 8000e12:	f000 fd53 	bl	80018bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000e1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_I2C_MspInit+0xec>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2021      	movs	r0, #33	@ 0x21
 8000e34:	f000 fc3d 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e38:	2021      	movs	r0, #33	@ 0x21
 8000e3a:	f000 fc56 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	40005800 	.word	0x40005800

08000e58 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_I2C_MspDeInit+0x70>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d111      	bne.n	8000e8e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_I2C_MspDeInit+0x74>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_I2C_MspDeInit+0x74>)
 8000e70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000e74:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000e76:	2140      	movs	r1, #64	@ 0x40
 8000e78:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <HAL_I2C_MspDeInit+0x78>)
 8000e7a:	f000 fea3 	bl	8001bc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000e7e:	2180      	movs	r1, #128	@ 0x80
 8000e80:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <HAL_I2C_MspDeInit+0x78>)
 8000e82:	f000 fe9f 	bl	8001bc4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000e86:	201f      	movs	r0, #31
 8000e88:	f000 fc3d 	bl	8001706 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000e8c:	e017      	b.n	8000ebe <HAL_I2C_MspDeInit+0x66>
  else if(hi2c->Instance==I2C2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a10      	ldr	r2, [pc, #64]	@ (8000ed4 <HAL_I2C_MspDeInit+0x7c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d112      	bne.n	8000ebe <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_I2C_MspDeInit+0x74>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <HAL_I2C_MspDeInit+0x74>)
 8000e9e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ea2:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000ea4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <HAL_I2C_MspDeInit+0x78>)
 8000eaa:	f000 fe8b 	bl	8001bc4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000eae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eb2:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <HAL_I2C_MspDeInit+0x78>)
 8000eb4:	f000 fe86 	bl	8001bc4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8000eb8:	2021      	movs	r0, #33	@ 0x21
 8000eba:	f000 fc24 	bl	8001706 <HAL_NVIC_DisableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40005800 	.word	0x40005800

08000ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff0 <HAL_SPI_MspInit+0x118>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d138      	bne.n	8000f6a <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000efe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a37      	ldr	r2, [pc, #220]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b35      	ldr	r3, [pc, #212]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f28:	23a0      	movs	r3, #160	@ 0xa0
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482f      	ldr	r0, [pc, #188]	@ (8000ff8 <HAL_SPI_MspInit+0x120>)
 8000f3c:	f000 fcbe 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f40:	2340      	movs	r3, #64	@ 0x40
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4829      	ldr	r0, [pc, #164]	@ (8000ff8 <HAL_SPI_MspInit+0x120>)
 8000f54:	f000 fcb2 	bl	80018bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2023      	movs	r0, #35	@ 0x23
 8000f5e:	f000 fba8 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f62:	2023      	movs	r0, #35	@ 0x23
 8000f64:	f000 fbc1 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f68:	e03e      	b.n	8000fe8 <HAL_SPI_MspInit+0x110>
  else if(hspi->Instance==SPI2)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_SPI_MspInit+0x124>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d139      	bne.n	8000fe8 <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	61d3      	str	r3, [r2, #28]
 8000f80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_SPI_MspInit+0x11c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000fa4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4811      	ldr	r0, [pc, #68]	@ (8001000 <HAL_SPI_MspInit+0x128>)
 8000fba:	f000 fc7f 	bl	80018bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480b      	ldr	r0, [pc, #44]	@ (8001000 <HAL_SPI_MspInit+0x128>)
 8000fd4:	f000 fc72 	bl	80018bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2024      	movs	r0, #36	@ 0x24
 8000fde:	f000 fb68 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fe2:	2024      	movs	r0, #36	@ 0x24
 8000fe4:	f000 fb81 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	@ 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40013000 	.word	0x40013000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40003800 	.word	0x40003800
 8001000:	40010c00 	.word	0x40010c00

08001004 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <HAL_SPI_MspDeInit+0x5c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10d      	bne.n	8001032 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_SPI_MspDeInit+0x60>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <HAL_SPI_MspDeInit+0x60>)
 800101c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001020:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001022:	21e0      	movs	r1, #224	@ 0xe0
 8001024:	4810      	ldr	r0, [pc, #64]	@ (8001068 <HAL_SPI_MspDeInit+0x64>)
 8001026:	f000 fdcd 	bl	8001bc4 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800102a:	2023      	movs	r0, #35	@ 0x23
 800102c:	f000 fb6b 	bl	8001706 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001030:	e012      	b.n	8001058 <HAL_SPI_MspDeInit+0x54>
  else if(hspi->Instance==SPI2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_SPI_MspDeInit+0x68>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d10d      	bne.n	8001058 <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_SPI_MspDeInit+0x60>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_SPI_MspDeInit+0x60>)
 8001042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001046:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001048:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <HAL_SPI_MspDeInit+0x6c>)
 800104e:	f000 fdb9 	bl	8001bc4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001052:	2024      	movs	r0, #36	@ 0x24
 8001054:	f000 fb57 	bl	8001706 <HAL_NVIC_DisableIRQ>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40013000 	.word	0x40013000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010800 	.word	0x40010800
 800106c:	40003800 	.word	0x40003800
 8001070:	40010c00 	.word	0x40010c00

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001084:	d113      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	201c      	movs	r0, #28
 80010a4:	f000 fb05 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a8:	201c      	movs	r0, #28
 80010aa:	f000 fb1e 	bl	80016ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a3f      	ldr	r2, [pc, #252]	@ (80011d4 <HAL_UART_MspInit+0x118>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d13a      	bne.n	8001152 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010dc:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a3d      	ldr	r2, [pc, #244]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a37      	ldr	r2, [pc, #220]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	4619      	mov	r1, r3
 8001120:	482e      	ldr	r0, [pc, #184]	@ (80011dc <HAL_UART_MspInit+0x120>)
 8001122:	f000 fbcb 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4619      	mov	r1, r3
 800113a:	4828      	ldr	r0, [pc, #160]	@ (80011dc <HAL_UART_MspInit+0x120>)
 800113c:	f000 fbbe 	bl	80018bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2025      	movs	r0, #37	@ 0x25
 8001146:	f000 fab4 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800114a:	2025      	movs	r0, #37	@ 0x25
 800114c:	f000 facd 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001150:	e03c      	b.n	80011cc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <HAL_UART_MspInit+0x124>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d137      	bne.n	80011cc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4a1d      	ldr	r2, [pc, #116]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 8001162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001166:	61d3      	str	r3, [r2, #28]
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_UART_MspInit+0x11c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118c:	2304      	movs	r3, #4
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4619      	mov	r1, r3
 800119e:	480f      	ldr	r0, [pc, #60]	@ (80011dc <HAL_UART_MspInit+0x120>)
 80011a0:	f000 fb8c 	bl	80018bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a4:	2308      	movs	r3, #8
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4809      	ldr	r0, [pc, #36]	@ (80011dc <HAL_UART_MspInit+0x120>)
 80011b8:	f000 fb80 	bl	80018bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2026      	movs	r0, #38	@ 0x26
 80011c2:	f000 fa76 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c6:	2026      	movs	r0, #38	@ 0x26
 80011c8:	f000 fa8f 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40004400 	.word	0x40004400

080011e4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <HAL_UART_MspDeInit+0x5c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10e      	bne.n	8001214 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <HAL_UART_MspDeInit+0x60>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <HAL_UART_MspDeInit+0x60>)
 80011fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001200:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001202:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <HAL_UART_MspDeInit+0x64>)
 8001208:	f000 fcdc 	bl	8001bc4 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800120c:	2025      	movs	r0, #37	@ 0x25
 800120e:	f000 fa7a 	bl	8001706 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001212:	e011      	b.n	8001238 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <HAL_UART_MspDeInit+0x68>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10c      	bne.n	8001238 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <HAL_UART_MspDeInit+0x60>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a08      	ldr	r2, [pc, #32]	@ (8001244 <HAL_UART_MspDeInit+0x60>)
 8001224:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001228:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800122a:	210c      	movs	r1, #12
 800122c:	4806      	ldr	r0, [pc, #24]	@ (8001248 <HAL_UART_MspDeInit+0x64>)
 800122e:	f000 fcc9 	bl	8001bc4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001232:	2026      	movs	r0, #38	@ 0x26
 8001234:	f000 fa67 	bl	8001706 <HAL_NVIC_DisableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40013800 	.word	0x40013800
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800
 800124c:	40004400 	.word	0x40004400

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f8f0 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIM2_IRQHandler+0x10>)
 80012ae:	f004 fbc3 	bl	8005a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200003c4 	.word	0x200003c4

080012bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <I2C1_EV_IRQHandler+0x10>)
 80012c2:	f001 f9b5 	bl	8002630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000026c 	.word	0x2000026c

080012d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <I2C2_EV_IRQHandler+0x10>)
 80012d6:	f001 f9ab 	bl	8002630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002c0 	.word	0x200002c0

080012e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <SPI1_IRQHandler+0x10>)
 80012ea:	f003 ff2d 	bl	8005148 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000314 	.word	0x20000314

080012f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <SPI2_IRQHandler+0x10>)
 80012fe:	f003 ff23 	bl	8005148 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000036c 	.word	0x2000036c

0800130c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <USART1_IRQHandler+0x10>)
 8001312:	f005 f81f 	bl	8006354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000040c 	.word	0x2000040c

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <USART2_IRQHandler+0x10>)
 8001326:	f005 f815 	bl	8006354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000454 	.word	0x20000454

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f005 fe42 	bl	8006fec <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20005000 	.word	0x20005000
 8001394:	00000400 	.word	0x00000400
 8001398:	200004f0 	.word	0x200004f0
 800139c:	20000640 	.word	0x20000640

080013a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff fff8 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013b2:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b4:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c8:	4c09      	ldr	r4, [pc, #36]	@ (80013f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f005 fe0f 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fa03 	bl	80007e4 <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013e8:	08007120 	.word	0x08007120
  ldr r2, =_sbss
 80013ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013f0:	20000640 	.word	0x20000640

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <HAL_Init+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <HAL_Init+0x28>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f947 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	200f      	movs	r0, #15
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fc72 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f96d 	bl	8001722 <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f927 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	@ (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000004 	.word	0x20000004
 800147c:	2000000c 	.word	0x2000000c
 8001480:	20000008 	.word	0x20000008

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_IncTick+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_IncTick+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a03      	ldr	r2, [pc, #12]	@ (80014a4 <HAL_IncTick+0x20>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	200004f4 	.word	0x200004f4

080014a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b02      	ldr	r3, [pc, #8]	@ (80014b8 <HAL_GetTick+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	200004f4 	.word	0x200004f4

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4906      	ldr	r1, [pc, #24]	@ (8001554 <__NVIC_EnableIRQ+0x34>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db12      	blt.n	8001590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	490a      	ldr	r1, [pc, #40]	@ (800159c <__NVIC_DisableIRQ+0x44>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	3320      	adds	r3, #32
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001584:	f3bf 8f4f 	dsb	sy
}
 8001588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800158a:	f3bf 8f6f 	isb	sy
}
 800158e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff90 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff09 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff1e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff11 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff1f 	bl	8001558 <__NVIC_DisableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff94 	bl	8001658 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d008      	beq.n	8001764 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2204      	movs	r2, #4
 8001756:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e020      	b.n	80017a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020e 	bic.w	r2, r2, #14
 8001772:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d005      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e051      	b.n	8001878 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020e 	bic.w	r2, r2, #14
 80017e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_DMA_Abort_IT+0xd4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d029      	beq.n	8001852 <HAL_DMA_Abort_IT+0xa2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	@ (8001888 <HAL_DMA_Abort_IT+0xd8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <HAL_DMA_Abort_IT+0x9e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_DMA_Abort_IT+0xdc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01a      	beq.n	8001848 <HAL_DMA_Abort_IT+0x98>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <HAL_DMA_Abort_IT+0xe0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d012      	beq.n	8001842 <HAL_DMA_Abort_IT+0x92>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <HAL_DMA_Abort_IT+0xe4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00a      	beq.n	800183c <HAL_DMA_Abort_IT+0x8c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1b      	ldr	r2, [pc, #108]	@ (8001898 <HAL_DMA_Abort_IT+0xe8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d102      	bne.n	8001836 <HAL_DMA_Abort_IT+0x86>
 8001830:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001834:	e00e      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001836:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800183a:	e00b      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 800183c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001840:	e008      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001846:	e005      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184c:	e002      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 800184e:	2310      	movs	r3, #16
 8001850:	e000      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001852:	2301      	movs	r3, #1
 8001854:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_DMA_Abort_IT+0xec>)
 8001856:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    } 
  }
  return status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020008 	.word	0x40020008
 8001888:	4002001c 	.word	0x4002001c
 800188c:	40020030 	.word	0x40020030
 8001890:	40020044 	.word	0x40020044
 8001894:	40020058 	.word	0x40020058
 8001898:	4002006c 	.word	0x4002006c
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	@ 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e169      	b.n	8001ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8158 	bne.w	8001b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4a98      	ldr	r2, [pc, #608]	@ (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4a98      	ldr	r2, [pc, #608]	@ (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a96      	ldr	r2, [pc, #600]	@ (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a96      	ldr	r2, [pc, #600]	@ (8001b64 <HAL_GPIO_Init+0x2a8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a94      	ldr	r2, [pc, #592]	@ (8001b64 <HAL_GPIO_Init+0x2a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a94      	ldr	r2, [pc, #592]	@ (8001b68 <HAL_GPIO_Init+0x2ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a92      	ldr	r2, [pc, #584]	@ (8001b68 <HAL_GPIO_Init+0x2ac>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a92      	ldr	r2, [pc, #584]	@ (8001b6c <HAL_GPIO_Init+0x2b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a90      	ldr	r2, [pc, #576]	@ (8001b6c <HAL_GPIO_Init+0x2b0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a79      	ldr	r2, [pc, #484]	@ (8001b70 <HAL_GPIO_Init+0x2b4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	@ 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80b1 	beq.w	8001b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a40      	ldr	r2, [pc, #256]	@ (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3f      	ldr	r2, [pc, #252]	@ (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3d      	ldr	r2, [pc, #244]	@ (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	492f      	ldr	r1, [pc, #188]	@ (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	492c      	ldr	r1, [pc, #176]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4928      	ldr	r1, [pc, #160]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4922      	ldr	r1, [pc, #136]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	491e      	ldr	r1, [pc, #120]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4918      	ldr	r1, [pc, #96]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4914      	ldr	r1, [pc, #80]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e021      	b.n	8001b9e <HAL_GPIO_Init+0x2e2>
 8001b5a:	bf00      	nop
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10220000 	.word	0x10220000
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae8e 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	372c      	adds	r7, #44	@ 0x2c
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001bd2:	e09a      	b.n	8001d0a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 808d 	beq.w	8001d04 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001bea:	4a4e      	ldr	r2, [pc, #312]	@ (8001d24 <HAL_GPIO_DeInit+0x160>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a46      	ldr	r2, [pc, #280]	@ (8001d28 <HAL_GPIO_DeInit+0x164>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_DeInit+0x78>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a45      	ldr	r2, [pc, #276]	@ (8001d2c <HAL_GPIO_DeInit+0x168>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_DeInit+0x74>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a44      	ldr	r2, [pc, #272]	@ (8001d30 <HAL_GPIO_DeInit+0x16c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_DeInit+0x70>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a43      	ldr	r2, [pc, #268]	@ (8001d34 <HAL_GPIO_DeInit+0x170>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_DeInit+0x6c>
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_DeInit+0x7a>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_DeInit+0x7a>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_DeInit+0x7a>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_DeInit+0x7a>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d132      	bne.n	8001cb4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4938      	ldr	r1, [pc, #224]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001c5c:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4934      	ldr	r1, [pc, #208]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001c6a:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4931      	ldr	r1, [pc, #196]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001c78:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	492d      	ldr	r1, [pc, #180]	@ (8001d38 <HAL_GPIO_DeInit+0x174>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001c96:	4a23      	ldr	r2, [pc, #140]	@ (8001d24 <HAL_GPIO_DeInit+0x160>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	481f      	ldr	r0, [pc, #124]	@ (8001d24 <HAL_GPIO_DeInit+0x160>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	400a      	ands	r2, r1
 8001cae:	3302      	adds	r3, #2
 8001cb0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	@ 0xff
 8001cb8:	d801      	bhi.n	8001cbe <HAL_GPIO_DeInit+0xfa>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_DeInit+0xfe>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	@ 0xff
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_GPIO_DeInit+0x10c>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_DeInit+0x112>
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	210f      	movs	r1, #15
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	2104      	movs	r1, #4
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3301      	adds	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f af5e 	bne.w	8001bd4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40011400 	.word	0x40011400
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d58:	e003      	b.n	8001d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	041a      	lsls	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e12b      	b.n	8001fd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe ffe4 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	@ 0x24
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd0:	f002 fdf8 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a81      	ldr	r2, [pc, #516]	@ (8001fe0 <HAL_I2C_Init+0x274>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d807      	bhi.n	8001df0 <HAL_I2C_Init+0x84>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a80      	ldr	r2, [pc, #512]	@ (8001fe4 <HAL_I2C_Init+0x278>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e006      	b.n	8001dfe <HAL_I2C_Init+0x92>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fe8 <HAL_I2C_Init+0x27c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bf94      	ite	ls
 8001df8:	2301      	movls	r3, #1
 8001dfa:	2300      	movhi	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0e7      	b.n	8001fd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a78      	ldr	r2, [pc, #480]	@ (8001fec <HAL_I2C_Init+0x280>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9b      	lsrs	r3, r3, #18
 8001e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe0 <HAL_I2C_Init+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d802      	bhi.n	8001e40 <HAL_I2C_Init+0xd4>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	e009      	b.n	8001e54 <HAL_I2C_Init+0xe8>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	4a69      	ldr	r2, [pc, #420]	@ (8001ff0 <HAL_I2C_Init+0x284>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	3301      	adds	r3, #1
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	495c      	ldr	r1, [pc, #368]	@ (8001fe0 <HAL_I2C_Init+0x274>)
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d819      	bhi.n	8001ea8 <HAL_I2C_Init+0x13c>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e59      	subs	r1, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e82:	1c59      	adds	r1, r3, #1
 8001e84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e88:	400b      	ands	r3, r1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_I2C_Init+0x138>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1e59      	subs	r1, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	e051      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e04f      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d111      	bne.n	8001ed4 <HAL_I2C_Init+0x168>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e012      	b.n	8001efa <HAL_I2C_Init+0x18e>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1e58      	subs	r0, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	0099      	lsls	r1, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x196>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e022      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <HAL_I2C_Init+0x1bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1e58      	subs	r0, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	440b      	add	r3, r1
 8001f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f26:	e00f      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	0099      	lsls	r1, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	6809      	ldr	r1, [r1, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6911      	ldr	r1, [r2, #16]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68d2      	ldr	r2, [r2, #12]
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	000186a0 	.word	0x000186a0
 8001fe4:	001e847f 	.word	0x001e847f
 8001fe8:	003d08ff 	.word	0x003d08ff
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	10624dd3 	.word	0x10624dd3

08001ff4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e021      	b.n	800204a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2224      	movs	r2, #36	@ 0x24
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe ff1a 	bl	8000e58 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002064:	2b80      	cmp	r3, #128	@ 0x80
 8002066:	d103      	bne.n	8002070 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  }
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
	...

0800207c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	@ 0x30
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	461a      	mov	r2, r3
 8002088:	460b      	mov	r3, r1
 800208a:	817b      	strh	r3, [r7, #10]
 800208c:	4613      	mov	r3, r2
 800208e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fa08 	bl	80014a8 <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	f040 824b 	bne.w	800253e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2319      	movs	r3, #25
 80020ae:	2201      	movs	r2, #1
 80020b0:	497f      	ldr	r1, [pc, #508]	@ (80022b0 <HAL_I2C_Master_Receive+0x234>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f001 fef8 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
 80020c0:	e23e      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2C_Master_Receive+0x54>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e237      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d007      	beq.n	80020f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002104:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2222      	movs	r2, #34	@ 0x22
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a5f      	ldr	r2, [pc, #380]	@ (80022b4 <HAL_I2C_Master_Receive+0x238>)
 8002136:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f001 fd3c 	bl	8003bbc <I2C_MasterRequestRead>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1f8      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	d113      	bne.n	800217e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e1cc      	b.n	8002518 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002182:	2b01      	cmp	r3, #1
 8002184:	d11e      	bne.n	80021c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002194:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002196:	b672      	cpsid	i
}
 8002198:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c0:	b662      	cpsie	i
}
 80021c2:	e035      	b.n	8002230 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d11e      	bne.n	800220a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002204:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002206:	b662      	cpsie	i
}
 8002208:	e012      	b.n	8002230 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002230:	e172      	b.n	8002518 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002236:	2b03      	cmp	r3, #3
 8002238:	f200 811f 	bhi.w	800247a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002240:	2b01      	cmp	r3, #1
 8002242:	d123      	bne.n	800228c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002246:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f001 ff79 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e173      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800228a:	e145      	b.n	8002518 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002290:	2b02      	cmp	r3, #2
 8002292:	d152      	bne.n	800233a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	2200      	movs	r2, #0
 800229c:	4906      	ldr	r1, [pc, #24]	@ (80022b8 <HAL_I2C_Master_Receive+0x23c>)
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f001 fe02 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e148      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
 80022ae:	bf00      	nop
 80022b0:	00100002 	.word	0x00100002
 80022b4:	ffff0000 	.word	0xffff0000
 80022b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
}
 80022be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002302:	b662      	cpsie	i
}
 8002304:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002338:	e0ee      	b.n	8002518 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002340:	2200      	movs	r2, #0
 8002342:	4981      	ldr	r1, [pc, #516]	@ (8002548 <HAL_I2C_Master_Receive+0x4cc>)
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f001 fdaf 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f5      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002364:	b672      	cpsid	i
}
 8002366:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800239a:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <HAL_I2C_Master_Receive+0x4d0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	08db      	lsrs	r3, r3, #3
 80023a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002550 <HAL_I2C_Master_Receive+0x4d4>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a1a      	lsrs	r2, r3, #8
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00da      	lsls	r2, r3, #3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d118      	bne.n	80023f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023e2:	b662      	cpsie	i
}
 80023e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0a6      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d1d9      	bne.n	80023b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002442:	b662      	cpsie	i
}
 8002444:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002478:	e04e      	b.n	8002518 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f001 fe5e 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e058      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d124      	bne.n	8002518 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d107      	bne.n	80024e6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f ae88 	bne.w	8002232 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3728      	adds	r7, #40	@ 0x28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	00010004 	.word	0x00010004
 800254c:	20000004 	.word	0x20000004
 8002550:	14f8b589 	.word	0x14f8b589

08002554 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	d158      	bne.n	8002620 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_I2C_Slave_Receive_IT+0x26>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e051      	b.n	8002622 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Slave_Receive_IT+0x38>
 8002588:	2302      	movs	r3, #2
 800258a:	e04a      	b.n	8002622 <HAL_I2C_Slave_Receive_IT+0xce>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d007      	beq.n	80025b2 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2222      	movs	r2, #34	@ 0x22
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	88fa      	ldrh	r2, [r7, #6]
 80025e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a0e      	ldr	r2, [pc, #56]	@ (800262c <HAL_I2C_Slave_Receive_IT+0xd8>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002602:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800261a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	ffff0000 	.word	0xffff0000

08002630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002650:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002658:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b10      	cmp	r3, #16
 800265e:	d003      	beq.n	8002668 <HAL_I2C_EV_IRQHandler+0x38>
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	f040 80b1 	bne.w	80027ca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_I2C_EV_IRQHandler+0x6e>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002688:	d003      	beq.n	8002692 <HAL_I2C_EV_IRQHandler+0x62>
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002690:	d101      	bne.n	8002696 <HAL_I2C_EV_IRQHandler+0x66>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_I2C_EV_IRQHandler+0x68>
 8002696:	2300      	movs	r3, #0
 8002698:	2b01      	cmp	r3, #1
 800269a:	f000 8114 	beq.w	80028c6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00b      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x90>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f001 fda1 	bl	80041fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fccf 	bl	800305c <I2C_Master_SB>
 80026be:	e083      	b.n	80027c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_I2C_EV_IRQHandler+0xac>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fd46 	bl	8003166 <I2C_Master_ADD10>
 80026da:	e075      	b.n	80027c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0xc8>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fd61 	bl	80031b8 <I2C_Master_ADDR>
 80026f6:	e067      	b.n	80027c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d036      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002710:	f000 80db 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <HAL_I2C_EV_IRQHandler+0x10a>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_I2C_EV_IRQHandler+0x10a>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f92f 	bl	8002996 <I2C_MasterTransmit_TXE>
 8002738:	e046      	b.n	80027c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80c2 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80bc 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002752:	7bbb      	ldrb	r3, [r7, #14]
 8002754:	2b21      	cmp	r3, #33	@ 0x21
 8002756:	d103      	bne.n	8002760 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9b8 	bl	8002ace <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800275e:	e0b4      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	f040 80b1 	bne.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fa26 	bl	8002bba <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800276e:	e0ac      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800277a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800277e:	f000 80a4 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <HAL_I2C_EV_IRQHandler+0x178>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_I2C_EV_IRQHandler+0x178>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 faa2 	bl	8002cea <I2C_MasterReceive_RXNE>
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 808b 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8085 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb5a 	bl	8002e7a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027c6:	e080      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
 80027c8:	e07f      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e007      	b.n	80027ec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_I2C_EV_IRQHandler+0x1ea>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 ff27 	bl	8003666 <I2C_Slave_ADDR>
 8002818:	e05a      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_I2C_EV_IRQHandler+0x206>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 ff62 	bl	80036f8 <I2C_Slave_STOPF>
 8002834:	e04c      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	2b21      	cmp	r3, #33	@ 0x21
 800283a:	d002      	beq.n	8002842 <HAL_I2C_EV_IRQHandler+0x212>
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	2b29      	cmp	r3, #41	@ 0x29
 8002840:	d120      	bne.n	8002884 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <HAL_I2C_EV_IRQHandler+0x238>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_I2C_EV_IRQHandler+0x238>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fe44 	bl	80034ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002866:	e032      	b.n	80028ce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d02d      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0x29e>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002878:	2b00      	cmp	r3, #0
 800287a:	d028      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fe73 	bl	8003568 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002882:	e024      	b.n	80028ce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_I2C_EV_IRQHandler+0x27a>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_I2C_EV_IRQHandler+0x27a>
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fe80 	bl	80035a8 <I2C_SlaveReceive_RXNE>
 80028a8:	e012      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 feb0 	bl	8003624 <I2C_SlaveReceive_BTF>
 80028c4:	e004      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80028c6:	bf00      	nop
 80028c8:	e002      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
 8002918:	4613      	mov	r3, r2
 800291a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ac:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d150      	bne.n	8002a5e <I2C_MasterTransmit_TXE+0xc8>
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b21      	cmp	r3, #33	@ 0x21
 80029c0:	d14d      	bne.n	8002a5e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d01d      	beq.n	8002a04 <I2C_MasterTransmit_TXE+0x6e>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d01a      	beq.n	8002a04 <I2C_MasterTransmit_TXE+0x6e>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029d4:	d016      	beq.n	8002a04 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029e4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2211      	movs	r2, #17
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff6a 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a02:	e060      	b.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a12:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b40      	cmp	r3, #64	@ 0x40
 8002a3c:	d107      	bne.n	8002a4e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff76 	bl	8002938 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a4c:	e03b      	b.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff3d 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a5c:	e033      	b.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b21      	cmp	r3, #33	@ 0x21
 8002a62:	d005      	beq.n	8002a70 <I2C_MasterTransmit_TXE+0xda>
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d12d      	bne.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b22      	cmp	r3, #34	@ 0x22
 8002a6e:	d12a      	bne.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a8a:	e01c      	b.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b40      	cmp	r3, #64	@ 0x40
 8002a96:	d103      	bne.n	8002aa0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f88e 	bl	8002bba <I2C_MemoryTransmit_TXE_BTF>
}
 8002a9e:	e012      	b.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ac4:	e7ff      	b.n	8002ac6 <I2C_MasterTransmit_TXE+0x130>
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b21      	cmp	r3, #33	@ 0x21
 8002ae6:	d164      	bne.n	8002bb2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d012      	beq.n	8002b18 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b16:	e04c      	b.n	8002bb2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d01d      	beq.n	8002b5a <I2C_MasterTransmit_BTF+0x8c>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d01a      	beq.n	8002b5a <I2C_MasterTransmit_BTF+0x8c>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b2a:	d016      	beq.n	8002b5a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b3a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2211      	movs	r2, #17
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff febf 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
}
 8002b58:	e02b      	b.n	8002bb2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b68:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b78:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b40      	cmp	r3, #64	@ 0x40
 8002b92:	d107      	bne.n	8002ba4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fecb 	bl	8002938 <HAL_I2C_MemTxCpltCallback>
}
 8002ba2:	e006      	b.n	8002bb2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fe92 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11d      	bne.n	8002c0e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10b      	bne.n	8002bf2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bea:	1c9a      	adds	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002bf0:	e077      	b.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	121b      	asrs	r3, r3, #8
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c0c:	e069      	b.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10b      	bne.n	8002c2e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c2c:	e059      	b.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d152      	bne.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b22      	cmp	r3, #34	@ 0x22
 8002c3a:	d10d      	bne.n	8002c58 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c56:	e044      	b.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d015      	beq.n	8002c8e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b21      	cmp	r3, #33	@ 0x21
 8002c66:	d112      	bne.n	8002c8e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c8c:	e029      	b.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d124      	bne.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b21      	cmp	r3, #33	@ 0x21
 8002c9c:	d121      	bne.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff fe2f 	bl	8002938 <HAL_I2C_MemTxCpltCallback>
}
 8002cda:	e002      	b.n	8002ce2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff f9b8 	bl	8002052 <I2C_Flush_DR>
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b22      	cmp	r3, #34	@ 0x22
 8002cfc:	f040 80b9 	bne.w	8002e72 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d921      	bls.n	8002d58 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	f040 8096 	bne.w	8002e72 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d54:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002d56:	e08c      	b.n	8002e72 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d07f      	beq.n	8002e60 <I2C_MasterReceive_RXNE+0x176>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d002      	beq.n	8002d6c <I2C_MasterReceive_RXNE+0x82>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d179      	bne.n	8002e60 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f001 f9b5 	bl	80040dc <I2C_WaitOnSTOPRequestThroughIT>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d14c      	bne.n	8002e12 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d86:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d96:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b40      	cmp	r3, #64	@ 0x40
 8002dd0:	d10a      	bne.n	8002de8 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fdb2 	bl	800294a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002de6:	e044      	b.n	8002e72 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d002      	beq.n	8002dfc <I2C_MasterReceive_RXNE+0x112>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d103      	bne.n	8002e04 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e02:	e002      	b.n	8002e0a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2212      	movs	r2, #18
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff fd6c 	bl	80028e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e10:	e02f      	b.n	8002e72 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e20:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fd7f 	bl	800295c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e5e:	e008      	b.n	8002e72 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6e:	605a      	str	r2, [r3, #4]
}
 8002e70:	e7ff      	b.n	8002e72 <I2C_MasterReceive_RXNE+0x188>
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d11b      	bne.n	8002eca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ec8:	e0c4      	b.n	8003054 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d129      	bne.n	8002f28 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00a      	beq.n	8002f00 <I2C_MasterReceive_BTF+0x86>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d007      	beq.n	8002f00 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f26:	e095      	b.n	8003054 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d17d      	bne.n	800302e <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d002      	beq.n	8002f3e <I2C_MasterReceive_BTF+0xc4>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d108      	bne.n	8002f50 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e016      	b.n	8002f7e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d002      	beq.n	8002f5c <I2C_MasterReceive_BTF+0xe2>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d108      	bne.n	8002f6e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e007      	b.n	8002f7e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002fd8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d10a      	bne.n	8003004 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fca4 	bl	800294a <HAL_I2C_MemRxCpltCallback>
}
 8003002:	e027      	b.n	8003054 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d002      	beq.n	8003018 <I2C_MasterReceive_BTF+0x19e>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b20      	cmp	r3, #32
 8003016:	d103      	bne.n	8003020 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
 800301e:	e002      	b.n	8003026 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2212      	movs	r2, #18
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fc5e 	bl	80028e8 <HAL_I2C_MasterRxCpltCallback>
}
 800302c:	e012      	b.n	8003054 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d117      	bne.n	80030a0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003088:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800308a:	e067      	b.n	800315c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
}
 800309e:	e05d      	b.n	800315c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030a8:	d133      	bne.n	8003112 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b21      	cmp	r3, #33	@ 0x21
 80030b4:	d109      	bne.n	80030ca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030c6:	611a      	str	r2, [r3, #16]
 80030c8:	e008      	b.n	80030dc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <I2C_Master_SB+0x92>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d032      	beq.n	800315c <I2C_Master_SB+0x100>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02d      	beq.n	800315c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310e:	605a      	str	r2, [r3, #4]
}
 8003110:	e024      	b.n	800315c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	b29b      	uxth	r3, r3
 8003120:	11db      	asrs	r3, r3, #7
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0306 	and.w	r3, r3, #6
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f063 030f 	orn	r3, r3, #15
 800312e:	b2da      	uxtb	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]
}
 8003136:	e011      	b.n	800315c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10d      	bne.n	800315c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	b29b      	uxth	r3, r3
 8003146:	11db      	asrs	r3, r3, #7
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f003 0306 	and.w	r3, r3, #6
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f063 030e 	orn	r3, r3, #14
 8003154:	b2da      	uxtb	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	b2da      	uxtb	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <I2C_Master_ADD10+0x26>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d108      	bne.n	800319e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00c      	beq.n	80031ae <I2C_Master_ADD10+0x48>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ac:	605a      	str	r2, [r3, #4]
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b091      	sub	sp, #68	@ 0x44
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b22      	cmp	r3, #34	@ 0x22
 80031e0:	f040 8174 	bne.w	80034cc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <I2C_Master_ADDR+0x54>
 80031ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d10b      	bne.n	800320c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f4:	2300      	movs	r3, #0
 80031f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	633b      	str	r3, [r7, #48]	@ 0x30
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	e16b      	b.n	80034e4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11d      	bne.n	8003250 <I2C_Master_ADDR+0x98>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800321c:	d118      	bne.n	8003250 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003242:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	651a      	str	r2, [r3, #80]	@ 0x50
 800324e:	e149      	b.n	80034e4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d113      	bne.n	8003282 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e120      	b.n	80034c4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 808a 	bne.w	80033a2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003294:	d137      	bne.n	8003306 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b4:	d113      	bne.n	80032de <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	e0f2      	b.n	80034c4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e0de      	b.n	80034c4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003308:	2b08      	cmp	r3, #8
 800330a:	d02e      	beq.n	800336a <I2C_Master_ADDR+0x1b2>
 800330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330e:	2b20      	cmp	r3, #32
 8003310:	d02b      	beq.n	800336a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	2b12      	cmp	r3, #18
 8003316:	d102      	bne.n	800331e <I2C_Master_ADDR+0x166>
 8003318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331a:	2b01      	cmp	r3, #1
 800331c:	d125      	bne.n	800336a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	2b04      	cmp	r3, #4
 8003322:	d00e      	beq.n	8003342 <I2C_Master_ADDR+0x18a>
 8003324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003326:	2b02      	cmp	r3, #2
 8003328:	d00b      	beq.n	8003342 <I2C_Master_ADDR+0x18a>
 800332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332c:	2b10      	cmp	r3, #16
 800332e:	d008      	beq.n	8003342 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e007      	b.n	8003352 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003350:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	e0ac      	b.n	80034c4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003378:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e090      	b.n	80034c4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d158      	bne.n	800345e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d021      	beq.n	80033f6 <I2C_Master_ADDR+0x23e>
 80033b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d01e      	beq.n	80033f6 <I2C_Master_ADDR+0x23e>
 80033b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d01b      	beq.n	80033f6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e012      	b.n	800341c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003404:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800342a:	d14b      	bne.n	80034c4 <I2C_Master_ADDR+0x30c>
 800342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003432:	d00b      	beq.n	800344c <I2C_Master_ADDR+0x294>
 8003434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003436:	2b01      	cmp	r3, #1
 8003438:	d008      	beq.n	800344c <I2C_Master_ADDR+0x294>
 800343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343c:	2b08      	cmp	r3, #8
 800343e:	d005      	beq.n	800344c <I2C_Master_ADDR+0x294>
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	2b10      	cmp	r3, #16
 8003444:	d002      	beq.n	800344c <I2C_Master_ADDR+0x294>
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	2b20      	cmp	r3, #32
 800344a:	d13b      	bne.n	80034c4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	e032      	b.n	80034c4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800346c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800347c:	d117      	bne.n	80034ae <I2C_Master_ADDR+0x2f6>
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003484:	d00b      	beq.n	800349e <I2C_Master_ADDR+0x2e6>
 8003486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003488:	2b01      	cmp	r3, #1
 800348a:	d008      	beq.n	800349e <I2C_Master_ADDR+0x2e6>
 800348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348e:	2b08      	cmp	r3, #8
 8003490:	d005      	beq.n	800349e <I2C_Master_ADDR+0x2e6>
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	2b10      	cmp	r3, #16
 8003496:	d002      	beq.n	800349e <I2C_Master_ADDR+0x2e6>
 8003498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349a:	2b20      	cmp	r3, #32
 800349c:	d107      	bne.n	80034ae <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80034ca:	e00b      	b.n	80034e4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
}
 80034e2:	e7ff      	b.n	80034e4 <I2C_Master_ADDR+0x32c>
 80034e4:	bf00      	nop
 80034e6:	3744      	adds	r7, #68	@ 0x44
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02b      	beq.n	8003560 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d114      	bne.n	8003560 <I2C_SlaveTransmit_TXE+0x72>
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b29      	cmp	r3, #41	@ 0x29
 800353a:	d111      	bne.n	8003560 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2221      	movs	r2, #33	@ 0x21
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2228      	movs	r2, #40	@ 0x28
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff f9cd 	bl	80028fa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02c      	beq.n	800361c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d114      	bne.n	800361c <I2C_SlaveReceive_RXNE+0x74>
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035f6:	d111      	bne.n	800361c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003606:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2222      	movs	r2, #34	@ 0x22
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2228      	movs	r2, #40	@ 0x28
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd f8c8 	bl	80007ac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003680:	2b28      	cmp	r3, #40	@ 0x28
 8003682:	d125      	bne.n	80036d0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003692:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d103      	bne.n	80036b4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	81bb      	strh	r3, [r7, #12]
 80036b2:	e002      	b.n	80036ba <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80036c2:	89ba      	ldrh	r2, [r7, #12]
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff f91f 	bl	800290c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036ce:	e00e      	b.n	80036ee <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003706:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003716:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003744:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003754:	d172      	bne.n	800383c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b22      	cmp	r3, #34	@ 0x22
 800375a:	d002      	beq.n	8003762 <I2C_Slave_STOPF+0x6a>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003760:	d135      	bne.n	80037ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f043 0204 	orr.w	r2, r3, #4
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003794:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe f880 	bl	80018a0 <HAL_DMA_GetState>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d049      	beq.n	800383a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	4a69      	ldr	r2, [pc, #420]	@ (8003950 <I2C_Slave_STOPF+0x258>)
 80037ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd fffc 	bl	80017b0 <HAL_DMA_Abort_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03d      	beq.n	800383a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037cc:	e035      	b.n	800383a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003800:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f84a 	bl	80018a0 <HAL_DMA_GetState>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d014      	beq.n	800383c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003816:	4a4e      	ldr	r2, [pc, #312]	@ (8003950 <I2C_Slave_STOPF+0x258>)
 8003818:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd ffc6 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003834:	4610      	mov	r0, r2
 8003836:	4798      	blx	r3
 8003838:	e000      	b.n	800383c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800383a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d03e      	beq.n	80038c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d112      	bne.n	800387a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d112      	bne.n	80038ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f043 0204 	orr.w	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f843 	bl	8003958 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80038d2:	e039      	b.n	8003948 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038d8:	d109      	bne.n	80038ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2228      	movs	r2, #40	@ 0x28
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fc ff5f 	bl	80007ac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b28      	cmp	r3, #40	@ 0x28
 80038f8:	d111      	bne.n	800391e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <I2C_Slave_STOPF+0x25c>)
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff f805 	bl	8002926 <HAL_I2C_ListenCpltCallback>
}
 800391c:	e014      	b.n	8003948 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	2b22      	cmp	r3, #34	@ 0x22
 8003924:	d002      	beq.n	800392c <I2C_Slave_STOPF+0x234>
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b22      	cmp	r3, #34	@ 0x22
 800392a:	d10d      	bne.n	8003948 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fc ff32 	bl	80007ac <HAL_I2C_SlaveRxCpltCallback>
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	08003d59 	.word	0x08003d59
 8003954:	ffff0000 	.word	0xffff0000

08003958 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003966:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800396e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003970:	7bbb      	ldrb	r3, [r7, #14]
 8003972:	2b10      	cmp	r3, #16
 8003974:	d002      	beq.n	800397c <I2C_ITError+0x24>
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	2b40      	cmp	r3, #64	@ 0x40
 800397a:	d10a      	bne.n	8003992 <I2C_ITError+0x3a>
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b22      	cmp	r3, #34	@ 0x22
 8003980:	d107      	bne.n	8003992 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003990:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003998:	2b28      	cmp	r3, #40	@ 0x28
 800399a:	d107      	bne.n	80039ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2228      	movs	r2, #40	@ 0x28
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80039aa:	e015      	b.n	80039d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ba:	d00a      	beq.n	80039d2 <I2C_ITError+0x7a>
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b60      	cmp	r3, #96	@ 0x60
 80039c0:	d007      	beq.n	80039d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e6:	d162      	bne.n	8003aae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d020      	beq.n	8003a48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb4 <I2C_ITError+0x25c>)
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fecc 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8089 	beq.w	8003b32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a42:	4610      	mov	r0, r2
 8003a44:	4798      	blx	r3
 8003a46:	e074      	b.n	8003b32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	4a59      	ldr	r2, [pc, #356]	@ (8003bb4 <I2C_ITError+0x25c>)
 8003a4e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd feab 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d068      	beq.n	8003b32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d10b      	bne.n	8003a86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4798      	blx	r3
 8003aac:	e041      	b.n	8003b32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b60      	cmp	r3, #96	@ 0x60
 8003ab8:	d125      	bne.n	8003b06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d10b      	bne.n	8003aee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fe ff35 	bl	800296e <HAL_I2C_AbortCpltCallback>
 8003b04:	e015      	b.n	8003b32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b10:	2b40      	cmp	r3, #64	@ 0x40
 8003b12:	d10b      	bne.n	8003b2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fe ff15 	bl	800295c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10e      	bne.n	8003b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d113      	bne.n	8003bac <I2C_ITError+0x254>
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b28      	cmp	r3, #40	@ 0x28
 8003b88:	d110      	bne.n	8003bac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb8 <I2C_ITError+0x260>)
 8003b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe febd 	bl	8002926 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	08003d59 	.word	0x08003d59
 8003bb8:	ffff0000 	.word	0xffff0000

08003bbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003be0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d006      	beq.n	8003bf6 <I2C_MasterRequestRead+0x3a>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d003      	beq.n	8003bf6 <I2C_MasterRequestRead+0x3a>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bf4:	d108      	bne.n	8003c08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e00b      	b.n	8003c20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	2b11      	cmp	r3, #17
 8003c0e:	d107      	bne.n	8003c20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f93b 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c46:	d103      	bne.n	8003c50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e079      	b.n	8003d48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c5c:	d108      	bne.n	8003c70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	e05f      	b.n	8003d30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c70:	897b      	ldrh	r3, [r7, #10]
 8003c72:	11db      	asrs	r3, r3, #7
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0306 	and.w	r3, r3, #6
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f063 030f 	orn	r3, r3, #15
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4930      	ldr	r1, [pc, #192]	@ (8003d50 <I2C_MasterRequestRead+0x194>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f984 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e054      	b.n	8003d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c9e:	897b      	ldrh	r3, [r7, #10]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4929      	ldr	r1, [pc, #164]	@ (8003d54 <I2C_MasterRequestRead+0x198>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f974 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e044      	b.n	8003d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f8d9 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d0a:	d103      	bne.n	8003d14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e017      	b.n	8003d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	11db      	asrs	r3, r3, #7
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 0306 	and.w	r3, r3, #6
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f063 030e 	orn	r3, r3, #14
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4907      	ldr	r1, [pc, #28]	@ (8003d54 <I2C_MasterRequestRead+0x198>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f930 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	00010008 	.word	0x00010008
 8003d54:	00010002 	.word	0x00010002

08003d58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <I2C_DMAAbort+0x148>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	08db      	lsrs	r3, r3, #3
 8003d78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea4 <I2C_DMAAbort+0x14c>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0a1a      	lsrs	r2, r3, #8
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00da      	lsls	r2, r3, #3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003d9e:	e00a      	b.n	8003db6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db4:	d0ea      	beq.n	8003d8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	2200      	movs	r2, #0
 8003dfa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e08:	2200      	movs	r2, #0
 8003e0a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b60      	cmp	r3, #96	@ 0x60
 8003e26:	d10e      	bne.n	8003e46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7fe fd95 	bl	800296e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e44:	e027      	b.n	8003e96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e4c:	2b28      	cmp	r3, #40	@ 0x28
 8003e4e:	d117      	bne.n	8003e80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2228      	movs	r2, #40	@ 0x28
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e7e:	e007      	b.n	8003e90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f7fe fd63 	bl	800295c <HAL_I2C_ErrorCallback>
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000004 	.word	0x20000004
 8003ea4:	14f8b589 	.word	0x14f8b589

08003ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb8:	e048      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d044      	beq.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fd faf1 	bl	80014a8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d139      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10d      	bne.n	8003efe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	e00c      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d116      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e023      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10d      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	e00c      	b.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d093      	beq.n	8003eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003faa:	e071      	b.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d123      	bne.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e067      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d041      	beq.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fd fa4c 	bl	80014a8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d136      	bne.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e00b      	b.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e021      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10c      	bne.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e00b      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f af6d 	bne.w	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040e8:	4b13      	ldr	r3, [pc, #76]	@ (8004138 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	08db      	lsrs	r3, r3, #3
 80040ee:	4a13      	ldr	r2, [pc, #76]	@ (800413c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	0a1a      	lsrs	r2, r3, #8
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b01      	subs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f043 0220 	orr.w	r2, r3, #32
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e008      	b.n	800412c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004128:	d0e9      	beq.n	80040fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000004 	.word	0x20000004
 800413c:	14f8b589 	.word	0x14f8b589

08004140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800414c:	e049      	b.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d119      	bne.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0210 	mvn.w	r2, #16
 8004164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e030      	b.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7fd f98a 	bl	80014a8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d016      	beq.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e007      	b.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d1ae      	bne.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800420a:	d103      	bne.n	8004214 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004212:	e007      	b.n	8004224 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800421c:	d102      	bne.n	8004224 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
	...

08004230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e272      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8087 	beq.w	800435e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004250:	4b92      	ldr	r3, [pc, #584]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b04      	cmp	r3, #4
 800425a:	d00c      	beq.n	8004276 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800425c:	4b8f      	ldr	r3, [pc, #572]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d112      	bne.n	800428e <HAL_RCC_OscConfig+0x5e>
 8004268:	4b8c      	ldr	r3, [pc, #560]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004274:	d10b      	bne.n	800428e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004276:	4b89      	ldr	r3, [pc, #548]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d06c      	beq.n	800435c <HAL_RCC_OscConfig+0x12c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d168      	bne.n	800435c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e24c      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x76>
 8004298:	4b80      	ldr	r3, [pc, #512]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a7f      	ldr	r2, [pc, #508]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 800429e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e02e      	b.n	8004304 <HAL_RCC_OscConfig+0xd4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b7b      	ldr	r3, [pc, #492]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a7a      	ldr	r2, [pc, #488]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b78      	ldr	r3, [pc, #480]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a77      	ldr	r2, [pc, #476]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e01d      	b.n	8004304 <HAL_RCC_OscConfig+0xd4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCC_OscConfig+0xbc>
 80042d2:	4b72      	ldr	r3, [pc, #456]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a71      	ldr	r2, [pc, #452]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b6f      	ldr	r3, [pc, #444]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6e      	ldr	r2, [pc, #440]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0xd4>
 80042ec:	4b6b      	ldr	r3, [pc, #428]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6a      	ldr	r2, [pc, #424]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b68      	ldr	r3, [pc, #416]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a67      	ldr	r2, [pc, #412]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004302:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fd f8cc 	bl	80014a8 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fd f8c8 	bl	80014a8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e200      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	4b5d      	ldr	r3, [pc, #372]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xe4>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fd f8b8 	bl	80014a8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fd f8b4 	bl	80014a8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e1ec      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	4b53      	ldr	r3, [pc, #332]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x10c>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d063      	beq.n	8004432 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800436a:	4b4c      	ldr	r3, [pc, #304]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004376:	4b49      	ldr	r3, [pc, #292]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b08      	cmp	r3, #8
 8004380:	d11c      	bne.n	80043bc <HAL_RCC_OscConfig+0x18c>
 8004382:	4b46      	ldr	r3, [pc, #280]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4b43      	ldr	r3, [pc, #268]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCC_OscConfig+0x176>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e1c0      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b3d      	ldr	r3, [pc, #244]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4939      	ldr	r1, [pc, #228]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	e03a      	b.n	8004432 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b36      	ldr	r3, [pc, #216]	@ (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fd f86d 	bl	80014a8 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fd f869 	bl	80014a8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e1a1      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	4b2d      	ldr	r3, [pc, #180]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b2a      	ldr	r3, [pc, #168]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4927      	ldr	r1, [pc, #156]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b26      	ldr	r3, [pc, #152]	@ (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd f84c 	bl	80014a8 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd f848 	bl	80014a8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e180      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03a      	beq.n	80044b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d019      	beq.n	800447a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004446:	4b17      	ldr	r3, [pc, #92]	@ (80044a4 <HAL_RCC_OscConfig+0x274>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fd f82c 	bl	80014a8 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fd f828 	bl	80014a8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e160      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <HAL_RCC_OscConfig+0x26c>)
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004472:	2001      	movs	r0, #1
 8004474:	f000 face 	bl	8004a14 <RCC_Delay>
 8004478:	e01c      	b.n	80044b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <HAL_RCC_OscConfig+0x274>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004480:	f7fd f812 	bl	80014a8 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004486:	e00f      	b.n	80044a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd f80e 	bl	80014a8 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d908      	bls.n	80044a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e146      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	42420000 	.word	0x42420000
 80044a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	4b92      	ldr	r3, [pc, #584]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e9      	bne.n	8004488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a6 	beq.w	800460e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c6:	4b8b      	ldr	r3, [pc, #556]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10d      	bne.n	80044ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d2:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	4a87      	ldr	r2, [pc, #540]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	61d3      	str	r3, [r2, #28]
 80044de:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b82      	ldr	r3, [pc, #520]	@ (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d118      	bne.n	800452c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fa:	4b7f      	ldr	r3, [pc, #508]	@ (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7e      	ldr	r2, [pc, #504]	@ (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004506:	f7fc ffcf 	bl	80014a8 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450e:	f7fc ffcb 	bl	80014a8 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	@ 0x64
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e103      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	4b75      	ldr	r3, [pc, #468]	@ (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x312>
 8004534:	4b6f      	ldr	r3, [pc, #444]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a6e      	ldr	r2, [pc, #440]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	e02d      	b.n	800459e <HAL_RCC_OscConfig+0x36e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x334>
 800454a:	4b6a      	ldr	r3, [pc, #424]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4a69      	ldr	r2, [pc, #420]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6213      	str	r3, [r2, #32]
 8004556:	4b67      	ldr	r3, [pc, #412]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a66      	ldr	r2, [pc, #408]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	e01c      	b.n	800459e <HAL_RCC_OscConfig+0x36e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b05      	cmp	r3, #5
 800456a:	d10c      	bne.n	8004586 <HAL_RCC_OscConfig+0x356>
 800456c:	4b61      	ldr	r3, [pc, #388]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a60      	ldr	r2, [pc, #384]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	4b5e      	ldr	r3, [pc, #376]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a5d      	ldr	r2, [pc, #372]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	e00b      	b.n	800459e <HAL_RCC_OscConfig+0x36e>
 8004586:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a5a      	ldr	r2, [pc, #360]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6213      	str	r3, [r2, #32]
 8004592:	4b58      	ldr	r3, [pc, #352]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a57      	ldr	r2, [pc, #348]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d015      	beq.n	80045d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fc ff7f 	bl	80014a8 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fc ff7b 	bl	80014a8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0b1      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c4:	4b4b      	ldr	r3, [pc, #300]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ee      	beq.n	80045ae <HAL_RCC_OscConfig+0x37e>
 80045d0:	e014      	b.n	80045fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d2:	f7fc ff69 	bl	80014a8 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fc ff65 	bl	80014a8 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e09b      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f0:	4b40      	ldr	r3, [pc, #256]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ee      	bne.n	80045da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4b3c      	ldr	r3, [pc, #240]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4a3b      	ldr	r2, [pc, #236]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800460c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8087 	beq.w	8004726 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004618:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d061      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d146      	bne.n	80046ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462c:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <HAL_RCC_OscConfig+0x4cc>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fc ff39 	bl	80014a8 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463a:	f7fc ff35 	bl	80014a8 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e06d      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464c:	4b29      	ldr	r3, [pc, #164]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004660:	d108      	bne.n	8004674 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004662:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4921      	ldr	r1, [pc, #132]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004674:	4b1f      	ldr	r3, [pc, #124]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a19      	ldr	r1, [r3, #32]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	430b      	orrs	r3, r1
 8004686:	491b      	ldr	r1, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468c:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCC_OscConfig+0x4cc>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fc ff09 	bl	80014a8 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469a:	f7fc ff05 	bl	80014a8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e03d      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x46a>
 80046b8:	e035      	b.n	8004726 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b10      	ldr	r3, [pc, #64]	@ (80046fc <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fc fef2 	bl	80014a8 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc feee 	bl	80014a8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e026      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046da:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x498>
 80046e6:	e01e      	b.n	8004726 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e019      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
 80046fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <HAL_RCC_OscConfig+0x500>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	429a      	cmp	r2, r3
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000

08004734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0d0      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004748:	4b6a      	ldr	r3, [pc, #424]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d910      	bls.n	8004778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b67      	ldr	r3, [pc, #412]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	4965      	ldr	r1, [pc, #404]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b63      	ldr	r3, [pc, #396]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0b8      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	4b59      	ldr	r3, [pc, #356]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a58      	ldr	r2, [pc, #352]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800479a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a8:	4b53      	ldr	r3, [pc, #332]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a52      	ldr	r2, [pc, #328]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b50      	ldr	r3, [pc, #320]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494d      	ldr	r1, [pc, #308]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d040      	beq.n	8004854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b47      	ldr	r3, [pc, #284]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d115      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b41      	ldr	r3, [pc, #260]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e073      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004802:	4b3d      	ldr	r3, [pc, #244]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06b      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4936      	ldr	r1, [pc, #216]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004824:	f7fc fe40 	bl	80014a8 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fc fe3c 	bl	80014a8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e053      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 020c 	and.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	429a      	cmp	r2, r3
 8004852:	d1eb      	bne.n	800482c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b27      	ldr	r3, [pc, #156]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d210      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b24      	ldr	r3, [pc, #144]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	4922      	ldr	r1, [pc, #136]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e032      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b19      	ldr	r3, [pc, #100]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4916      	ldr	r1, [pc, #88]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ae:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490e      	ldr	r1, [pc, #56]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048c2:	f000 f821 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	490a      	ldr	r1, [pc, #40]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	fa22 f303 	lsr.w	r3, r2, r3
 80048da:	4a09      	ldr	r2, [pc, #36]	@ (8004900 <HAL_RCC_ClockConfig+0x1cc>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_RCC_ClockConfig+0x1d0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fd9e 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40022000 	.word	0x40022000
 80048f8:	40021000 	.word	0x40021000
 80048fc:	080070ec 	.word	0x080070ec
 8004900:	20000004 	.word	0x20000004
 8004904:	20000008 	.word	0x20000008

08004908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004922:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <HAL_RCC_GetSysClockFreq+0x94>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b04      	cmp	r3, #4
 8004930:	d002      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x30>
 8004932:	2b08      	cmp	r3, #8
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x36>
 8004936:	e027      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004938:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800493a:	613b      	str	r3, [r7, #16]
      break;
 800493c:	e027      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	0c9b      	lsrs	r3, r3, #18
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	4a17      	ldr	r2, [pc, #92]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004956:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_RCC_GetSysClockFreq+0x94>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0c5b      	lsrs	r3, r3, #17
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	4a11      	ldr	r2, [pc, #68]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a0d      	ldr	r2, [pc, #52]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800496a:	fb03 f202 	mul.w	r2, r3, r2
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e004      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0c      	ldr	r2, [pc, #48]	@ (80049ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	613b      	str	r3, [r7, #16]
      break;
 8004986:	e002      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800498a:	613b      	str	r3, [r7, #16]
      break;
 800498c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498e:	693b      	ldr	r3, [r7, #16]
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	007a1200 	.word	0x007a1200
 80049a4:	08007104 	.word	0x08007104
 80049a8:	08007114 	.word	0x08007114
 80049ac:	003d0900 	.word	0x003d0900

080049b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b02      	ldr	r3, [pc, #8]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000004 	.word	0x20000004

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff2 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	080070fc 	.word	0x080070fc

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffde 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0adb      	lsrs	r3, r3, #11
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	@ (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	080070fc 	.word	0x080070fc

08004a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <RCC_Delay+0x34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <RCC_Delay+0x38>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0a5b      	lsrs	r3, r3, #9
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a30:	bf00      	nop
  }
  while (Delay --);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f9      	bne.n	8004a30 <RCC_Delay+0x1c>
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000004 	.word	0x20000004
 8004a4c:	10624dd3 	.word	0x10624dd3

08004a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e076      	b.n	8004b50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a72:	d009      	beq.n	8004a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fa18 	bl	8000ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0c:	ea42 0103 	orr.w	r1, r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	0c1a      	lsrs	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f002 0204 	and.w	r2, r2, #4
 8004b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e01a      	b.n	8004ba0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc fa3e 	bl	8001004 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	@ 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bba:	f7fc fc75 	bl	80014a8 <HAL_GetTick>
 8004bbe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bd2:	7ffb      	ldrb	r3, [r7, #31]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x4a>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bde:	d106      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x46>
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d001      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e17f      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x5c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x5c>
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e174      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x6e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e16d      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d003      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2205      	movs	r2, #5
 8004c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	887a      	ldrh	r2, [r7, #2]
 8004c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	887a      	ldrh	r2, [r7, #2]
 8004c54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	887a      	ldrh	r2, [r7, #2]
 8004c5a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	d007      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c8e:	d17e      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0xf6>
 8004c98:	8afb      	ldrh	r3, [r7, #22]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d16c      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc2:	e059      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d11b      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x162>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <HAL_SPI_TransmitReceive+0x162>
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d113      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	881a      	ldrh	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d119      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x1a4>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d4c:	f7fc fbac 	bl	80014a8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d80d      	bhi.n	8004d78 <HAL_SPI_TransmitReceive+0x1d0>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d009      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e0bc      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1a0      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x11c>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d19b      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x11c>
 8004d8c:	e082      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x1f4>
 8004d96:	8afb      	ldrh	r3, [r7, #22]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d171      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	330c      	adds	r3, #12
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc2:	e05d      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d11c      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x264>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x264>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d114      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d119      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x2a6>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d014      	beq.n	8004e4e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e4e:	f7fc fb2b 	bl	80014a8 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d803      	bhi.n	8004e66 <HAL_SPI_TransmitReceive+0x2be>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d102      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x2c4>
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e038      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d19c      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x21c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d197      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fc47 	bl	800572c <SPI_EndRxTxTransaction>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e01d      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
  }
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3728      	adds	r7, #40	@ 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
 8004f18:	e07f      	b.n	800501a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d110      	bne.n	8004f44 <HAL_SPI_Receive_IT+0x48>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2a:	d10b      	bne.n	8004f44 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f876 	bl	800502c <HAL_SPI_TransmitReceive_IT>
 8004f40:	4603      	mov	r3, r0
 8004f42:	e06a      	b.n	800501a <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_Receive_IT+0x54>
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e062      	b.n	800501a <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_SPI_Receive_IT+0x66>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e05b      	b.n	800501a <HAL_SPI_Receive_IT+0x11e>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <HAL_SPI_Receive_IT+0x128>)
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fb0:	e002      	b.n	8004fb8 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <HAL_SPI_Receive_IT+0x12c>)
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fe0:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b40      	cmp	r3, #64	@ 0x40
 8004fee:	d007      	beq.n	8005000 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005016:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	08005533 	.word	0x08005533
 8005028:	080054e9 	.word	0x080054e9

0800502c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005040:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d00c      	beq.n	8005068 <HAL_SPI_TransmitReceive_IT+0x3c>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005054:	d106      	bne.n	8005064 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_SPI_TransmitReceive_IT+0x38>
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d001      	beq.n	8005068 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
 8005066:	e061      	b.n	800512c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_SPI_TransmitReceive_IT+0x4e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_TransmitReceive_IT+0x4e>
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e056      	b.n	800512c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_SPI_TransmitReceive_IT+0x60>
 8005088:	2302      	movs	r3, #2
 800508a:	e04f      	b.n	800512c <HAL_SPI_TransmitReceive_IT+0x100>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b04      	cmp	r3, #4
 800509e:	d003      	beq.n	80050a8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2205      	movs	r2, #5
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	887a      	ldrh	r2, [r7, #2]
 80050be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	887a      	ldrh	r2, [r7, #2]
 80050ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	887a      	ldrh	r2, [r7, #2]
 80050d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_SPI_TransmitReceive_IT+0x10c>)
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a16      	ldr	r2, [pc, #88]	@ (800513c <HAL_SPI_TransmitReceive_IT+0x110>)
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80050e6:	e005      	b.n	80050f4 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <HAL_SPI_TransmitReceive_IT+0x114>)
 80050ec:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4a14      	ldr	r2, [pc, #80]	@ (8005144 <HAL_SPI_TransmitReceive_IT+0x118>)
 80050f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fe:	2b40      	cmp	r3, #64	@ 0x40
 8005100:	d007      	beq.n	8005112 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005128:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	0800542b 	.word	0x0800542b
 800513c:	0800548b 	.word	0x0800548b
 8005140:	08005367 	.word	0x08005367
 8005144:	080053cb 	.word	0x080053cb

08005148 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10e      	bne.n	8005188 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
    return;
 8005186:	e0b7      	b.n	80052f8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_SPI_IRQHandler+0x5e>
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
    return;
 80051a4:	e0a8      	b.n	80052f8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <HAL_SPI_IRQHandler+0x74>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 809e 	beq.w	80052f8 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8098 	beq.w	80052f8 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d023      	beq.n	800521a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d011      	beq.n	8005202 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	e00b      	b.n	800521a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	693b      	ldr	r3, [r7, #16]
        return;
 8005218:	e06e      	b.n	80052f8 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d014      	beq.n	800524e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005228:	f043 0201 	orr.w	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005252:	2b00      	cmp	r3, #0
 8005254:	d04f      	beq.n	80052f6 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005264:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_SPI_IRQHandler+0x13a>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d034      	beq.n	80052ec <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0203 	bic.w	r2, r2, #3
 8005290:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d011      	beq.n	80052be <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_SPI_IRQHandler+0x1b8>)
 80052a0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fc fa82 	bl	80017b0 <HAL_DMA_Abort_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005300 <HAL_SPI_IRQHandler+0x1b8>)
 80052cc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fc fa6c 	bl	80017b0 <HAL_DMA_Abort_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80052ea:	e003      	b.n	80052f4 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f812 	bl	8005316 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052f2:	e000      	b.n	80052f6 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80052f4:	bf00      	nop
    return;
 80052f6:	bf00      	nop
  }
}
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	0800533f 	.word	0x0800533f

08005304 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr

0800533e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ffdc 	bl	8005316 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f103 020c 	add.w	r2, r3, #12
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053b0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9e7 	bl	8005790 <SPI_CloseRxTx_ISR>
    }
  }
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005410:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f9b7 	bl	8005790 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	b292      	uxth	r2, r2
 800543e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005470:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f987 	bl	8005790 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	881a      	ldrh	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	1c9a      	adds	r2, r3, #2
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054ce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f958 	bl	8005790 <SPI_CloseRxTx_ISR>
    }
  }
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f103 020c 	add.w	r2, r3, #12
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	7812      	ldrb	r2, [r2, #0]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f9a7 	bl	8005878 <SPI_CloseRx_ISR>
  }
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	b292      	uxth	r2, r2
 8005546:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f984 	bl	8005878 <SPI_CloseRx_ISR>
  }
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005588:	f7fb ff8e 	bl	80014a8 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	4413      	add	r3, r2
 8005596:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005598:	f7fb ff86 	bl	80014a8 <HAL_GetTick>
 800559c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800559e:	4b39      	ldr	r3, [pc, #228]	@ (8005684 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	015b      	lsls	r3, r3, #5
 80055a4:	0d1b      	lsrs	r3, r3, #20
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ae:	e054      	b.n	800565a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d050      	beq.n	800565a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055b8:	f7fb ff76 	bl	80014a8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d902      	bls.n	80055ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d13d      	bne.n	800564a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e6:	d111      	bne.n	800560c <SPI_WaitFlagStateUntilTimeout+0x94>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f0:	d004      	beq.n	80055fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fa:	d107      	bne.n	800560c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800560a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005614:	d10f      	bne.n	8005636 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e017      	b.n	800567a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	3b01      	subs	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	bf0c      	ite	eq
 800566a:	2301      	moveq	r3, #1
 800566c:	2300      	movne	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	429a      	cmp	r2, r3
 8005676:	d19b      	bne.n	80055b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000004 	.word	0x20000004

08005688 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800569c:	d111      	bne.n	80056c2 <SPI_EndRxTransaction+0x3a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a6:	d004      	beq.n	80056b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b0:	d107      	bne.n	80056c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ca:	d117      	bne.n	80056fc <SPI_EndRxTransaction+0x74>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d4:	d112      	bne.n	80056fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2200      	movs	r2, #0
 80056de:	2101      	movs	r1, #1
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff ff49 	bl	8005578 <SPI_WaitFlagStateUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e013      	b.n	8005724 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	2180      	movs	r1, #128	@ 0x80
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff ff36 	bl	8005578 <SPI_WaitFlagStateUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e000      	b.n	8005724 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2201      	movs	r2, #1
 8005740:	2102      	movs	r1, #2
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff ff18 	bl	8005578 <SPI_WaitFlagStateUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e013      	b.n	8005786 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	2180      	movs	r1, #128	@ 0x80
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ff05 	bl	8005578 <SPI_WaitFlagStateUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e000      	b.n	8005786 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005798:	4b35      	ldr	r3, [pc, #212]	@ (8005870 <SPI_CloseRxTx_ISR+0xe0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a35      	ldr	r2, [pc, #212]	@ (8005874 <SPI_CloseRxTx_ISR+0xe4>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	0a5b      	lsrs	r3, r3, #9
 80057a4:	2264      	movs	r2, #100	@ 0x64
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057ac:	f7fb fe7c 	bl	80014a8 <HAL_GetTick>
 80057b0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0220 	bic.w	r2, r2, #32
 80057c0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057d4:	e009      	b.n	80057ea <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3b01      	subs	r3, #1
 80057da:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0eb      	beq.n	80057c2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	2164      	movs	r1, #100	@ 0x64
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ff9c 	bl	800572c <SPI_EndRxTxTransaction>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005828:	2b00      	cmp	r3, #0
 800582a:	d115      	bne.n	8005858 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b04      	cmp	r3, #4
 8005836:	d107      	bne.n	8005848 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fa ffc1 	bl	80007c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005846:	e00e      	b.n	8005866 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fd57 	bl	8005304 <HAL_SPI_TxRxCpltCallback>
}
 8005856:	e006      	b.n	8005866 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff fd58 	bl	8005316 <HAL_SPI_ErrorCallback>
}
 8005866:	bf00      	nop
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000004 	.word	0x20000004
 8005874:	057619f1 	.word	0x057619f1

08005878 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800588e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005890:	f7fb fe0a 	bl	80014a8 <HAL_GetTick>
 8005894:	4603      	mov	r3, r0
 8005896:	461a      	mov	r2, r3
 8005898:	2164      	movs	r1, #100	@ 0x64
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fef4 	bl	8005688 <SPI_EndRxTransaction>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fa ff71 	bl	80007c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80058e6:	e002      	b.n	80058ee <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fd14 	bl	8005316 <HAL_SPI_ErrorCallback>
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e041      	b.n	800598c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fb fba9 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f000 fa5b 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e03a      	b.n	8005a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a18      	ldr	r2, [pc, #96]	@ (8005a2c <HAL_TIM_Base_Start_IT+0x98>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d6:	d009      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a14      	ldr	r2, [pc, #80]	@ (8005a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d111      	bne.n	8005a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d010      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	e007      	b.n	8005a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800

08005a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f998 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f98b 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f99a 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0204 	mvn.w	r2, #4
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f972 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f965 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f974 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0208 	mvn.w	r2, #8
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f94c 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f93f 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f94e 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0210 	mvn.w	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2208      	movs	r2, #8
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f926 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f919 	bl	8005da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f928 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0201 	mvn.w	r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb f8a2 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa7f 	bl	80060c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8f8 	bl	8005ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa52 	bl	80060b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIM_ConfigClockSource+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e0b4      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x186>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0xd4>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x172>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b70      	cmp	r3, #112	@ 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xa6>
 8005c88:	2b70      	cmp	r3, #112	@ 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b60      	cmp	r3, #96	@ 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x11a>
 8005c90:	2b60      	cmp	r3, #96	@ 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b50      	cmp	r3, #80	@ 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xfa>
 8005c98:	2b50      	cmp	r3, #80	@ 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x13a>
 8005ca0:	2b40      	cmp	r3, #64	@ 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b30      	cmp	r3, #48	@ 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15a>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	f000 f974 	bl	8005fba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfc:	f000 f95d 	bl	8005fba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 f8d4 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	@ 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f92b 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 f8f2 	bl	8005f28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	@ 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f91b 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 f8b4 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	@ 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f90b 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 f902 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
	...

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec0 <TIM_Base_SetConfig+0xd0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_Base_SetConfig+0x30>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0e:	d007      	beq.n	8005e20 <TIM_Base_SetConfig+0x30>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec4 <TIM_Base_SetConfig+0xd4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_Base_SetConfig+0x30>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec8 <TIM_Base_SetConfig+0xd8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d108      	bne.n	8005e32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a22      	ldr	r2, [pc, #136]	@ (8005ec0 <TIM_Base_SetConfig+0xd0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_Base_SetConfig+0x62>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e40:	d007      	beq.n	8005e52 <TIM_Base_SetConfig+0x62>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec4 <TIM_Base_SetConfig+0xd4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0x62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec8 <TIM_Base_SetConfig+0xd8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec0 <TIM_Base_SetConfig+0xd0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	031b      	lsls	r3, r3, #12
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	621a      	str	r2, [r3, #32]
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f043 0307 	orr.w	r3, r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b087      	sub	sp, #28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	609a      	str	r2, [r3, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800600c:	2302      	movs	r3, #2
 800600e:	e046      	b.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605c:	d009      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a12      	ldr	r2, [pc, #72]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a10      	ldr	r2, [pc, #64]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10c      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800

080060b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e042      	b.n	8006170 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fa ffdc 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2224      	movs	r2, #36	@ 0x24
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800611a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fe01 	bl	8006d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e024      	b.n	80061d4 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2224      	movs	r2, #36	@ 0x24
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061a0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fb f81e 	bl	80011e4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	f040 8081 	bne.w	8006300 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_UART_Receive+0x2e>
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e079      	b.n	8006302 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2222      	movs	r2, #34	@ 0x22
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006222:	f7fb f941 	bl	80014a8 <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	88fa      	ldrh	r2, [r7, #6]
 8006232:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623c:	d108      	bne.n	8006250 <HAL_UART_Receive+0x74>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e003      	b.n	8006258 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006258:	e047      	b.n	80062ea <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	2120      	movs	r1, #32
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fb2f 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e042      	b.n	8006302 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10c      	bne.n	800629c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	b29a      	uxth	r2, r3
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	3302      	adds	r3, #2
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	e01f      	b.n	80062dc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a4:	d007      	beq.n	80062b6 <HAL_UART_Receive+0xda>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <HAL_UART_Receive+0xe8>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e008      	b.n	80062d6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3301      	adds	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1b2      	bne.n	800625a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e000      	b.n	8006302 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006300:	2302      	movs	r3, #2
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b20      	cmp	r3, #32
 8006322:	d112      	bne.n	800634a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Receive_IT+0x26>
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e00b      	b.n	800634c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	461a      	mov	r2, r3
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fb1a 	bl	800697a <UART_Start_Receive_IT>
 8006346:	4603      	mov	r3, r0
 8006348:	e000      	b.n	800634c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b0ba      	sub	sp, #232	@ 0xe8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800637a:	2300      	movs	r3, #0
 800637c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10f      	bne.n	80063ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_UART_IRQHandler+0x66>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fbf7 	bl	8006ba6 <UART_Receive_IT>
      return;
 80063b8:	e25b      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80de 	beq.w	8006580 <HAL_UART_IRQHandler+0x22c>
 80063c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80d1 	beq.w	8006580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00b      	beq.n	8006402 <HAL_UART_IRQHandler+0xae>
 80063ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f043 0201 	orr.w	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HAL_UART_IRQHandler+0xd2>
 800640e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	f043 0202 	orr.w	r2, r3, #2
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_UART_IRQHandler+0xf6>
 8006432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006442:	f043 0204 	orr.w	r2, r3, #4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d011      	beq.n	800647a <HAL_UART_IRQHandler+0x126>
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	f043 0208 	orr.w	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 81f2 	beq.w	8006868 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_UART_IRQHandler+0x14e>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb82 	bl	8006ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_UART_IRQHandler+0x17a>
 80064c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04f      	beq.n	800656e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa8c 	bl	80069ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d041      	beq.n	8006566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800650e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800651a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1d9      	bne.n	80064e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d013      	beq.n	800655e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653a:	4a7e      	ldr	r2, [pc, #504]	@ (8006734 <HAL_UART_IRQHandler+0x3e0>)
 800653c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006542:	4618      	mov	r0, r3
 8006544:	f7fb f934 	bl	80017b0 <HAL_DMA_Abort_IT>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655c:	e00e      	b.n	800657c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f993 	bl	800688a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	e00a      	b.n	800657c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f98f 	bl	800688a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e006      	b.n	800657c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f98b 	bl	800688a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800657a:	e175      	b.n	8006868 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	bf00      	nop
    return;
 800657e:	e173      	b.n	8006868 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	2b01      	cmp	r3, #1
 8006586:	f040 814f 	bne.w	8006828 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8148 	beq.w	8006828 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8141 	beq.w	8006828 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065a6:	2300      	movs	r3, #0
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60bb      	str	r3, [r7, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80b6 	beq.w	8006738 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8145 	beq.w	800686c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065ea:	429a      	cmp	r2, r3
 80065ec:	f080 813e 	bcs.w	800686c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	2b20      	cmp	r3, #32
 8006600:	f000 8088 	beq.w	8006714 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800661a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800661e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006622:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006630:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006634:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800663c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1d9      	bne.n	8006604 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006660:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3314      	adds	r3, #20
 8006670:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006674:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006678:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800667c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e1      	bne.n	8006650 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3314      	adds	r3, #20
 8006692:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800669c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800669e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3314      	adds	r3, #20
 80066ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e3      	bne.n	800668c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	330c      	adds	r3, #12
 80066d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e4:	f023 0310 	bic.w	r3, r3, #16
 80066e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e3      	bne.n	80066d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670e:	4618      	mov	r0, r3
 8006710:	f7fb f813 	bl	800173a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006722:	b29b      	uxth	r3, r3
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	b29b      	uxth	r3, r3
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8b6 	bl	800689c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006730:	e09c      	b.n	800686c <HAL_UART_IRQHandler+0x518>
 8006732:	bf00      	nop
 8006734:	08006ab1 	.word	0x08006ab1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006740:	b29b      	uxth	r3, r3
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 808e 	beq.w	8006870 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8089 	beq.w	8006870 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006782:	647a      	str	r2, [r7, #68]	@ 0x44
 8006784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	623b      	str	r3, [r7, #32]
   return(result);
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e3      	bne.n	8006796 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006800:	61fa      	str	r2, [r7, #28]
 8006802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	617b      	str	r3, [r7, #20]
   return(result);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e3      	bne.n	80067dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800681a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f83b 	bl	800689c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006826:	e023      	b.n	8006870 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_UART_IRQHandler+0x4f4>
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f949 	bl	8006ad8 <UART_Transmit_IT>
    return;
 8006846:	e014      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00e      	beq.n	8006872 <HAL_UART_IRQHandler+0x51e>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f988 	bl	8006b76 <UART_EndTransmit_IT>
    return;
 8006866:	e004      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
    return;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
      return;
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
      return;
 8006870:	bf00      	nop
  }
}
 8006872:	37e8      	adds	r7, #232	@ 0xe8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr

080068b2 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d8:	e03b      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d037      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fa fde1 	bl	80014a8 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e03a      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d023      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x8a>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b80      	cmp	r3, #128	@ 0x80
 800690e:	d020      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b40      	cmp	r3, #64	@ 0x40
 8006914:	d01d      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b08      	cmp	r3, #8
 8006922:	d116      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f856 	bl	80069ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2208      	movs	r2, #8
 8006944:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e00f      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4013      	ands	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	429a      	cmp	r2, r3
 800696e:	d0b4      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	4613      	mov	r3, r2
 8006986:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	88fa      	ldrh	r2, [r7, #6]
 8006992:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	88fa      	ldrh	r2, [r7, #6]
 8006998:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2222      	movs	r2, #34	@ 0x22
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0220 	orr.w	r2, r2, #32
 80069de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b095      	sub	sp, #84	@ 0x54
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a14:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e5      	bne.n	8006a28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d119      	bne.n	8006a98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f023 0310 	bic.w	r3, r3, #16
 8006a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a84:	61ba      	str	r2, [r7, #24]
 8006a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6979      	ldr	r1, [r7, #20]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	613b      	str	r3, [r7, #16]
   return(result);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e5      	bne.n	8006a64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006aa6:	bf00      	nop
 8006aa8:	3754      	adds	r7, #84	@ 0x54
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff fedd 	bl	800688a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b21      	cmp	r3, #33	@ 0x21
 8006aea:	d13e      	bne.n	8006b6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af4:	d114      	bne.n	8006b20 <UART_Transmit_IT+0x48>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d110      	bne.n	8006b20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	1c9a      	adds	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]
 8006b1e:	e008      	b.n	8006b32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6211      	str	r1, [r2, #32]
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10f      	bne.n	8006b66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fe6e 	bl	8006878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b08c      	sub	sp, #48	@ 0x30
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b22      	cmp	r3, #34	@ 0x22
 8006bb8:	f040 80ae 	bne.w	8006d18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc4:	d117      	bne.n	8006bf6 <UART_Receive_IT+0x50>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d113      	bne.n	8006bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	1c9a      	adds	r2, r3, #2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bf4:	e026      	b.n	8006c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c08:	d007      	beq.n	8006c1a <UART_Receive_IT+0x74>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <UART_Receive_IT+0x82>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e008      	b.n	8006c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d15d      	bne.n	8006d14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0220 	bic.w	r2, r2, #32
 8006c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d135      	bne.n	8006d0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc4:	623a      	str	r2, [r7, #32]
 8006cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	69f9      	ldr	r1, [r7, #28]
 8006cca:	6a3a      	ldr	r2, [r7, #32]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d10a      	bne.n	8006cfc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fdca 	bl	800689c <HAL_UARTEx_RxEventCallback>
 8006d08:	e002      	b.n	8006d10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7f9 fd38 	bl	8000780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e002      	b.n	8006d1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e000      	b.n	8006d1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d18:	2302      	movs	r3, #2
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3730      	adds	r7, #48	@ 0x30
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d5e:	f023 030c 	bic.w	r3, r3, #12
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <UART_SetConfig+0x114>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d103      	bne.n	8006d94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d8c:	f7fd fe2e 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	e002      	b.n	8006d9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d94:	f7fd fe16 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8006d98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009a      	lsls	r2, r3, #2
 8006da4:	441a      	add	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	4a22      	ldr	r2, [pc, #136]	@ (8006e3c <UART_SetConfig+0x118>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	0119      	lsls	r1, r3, #4
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009a      	lsls	r2, r3, #2
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e3c <UART_SetConfig+0x118>)
 8006dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2064      	movs	r0, #100	@ 0x64
 8006dda:	fb00 f303 	mul.w	r3, r0, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	3332      	adds	r3, #50	@ 0x32
 8006de4:	4a15      	ldr	r2, [pc, #84]	@ (8006e3c <UART_SetConfig+0x118>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006df0:	4419      	add	r1, r3
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009a      	lsls	r2, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e08:	4b0c      	ldr	r3, [pc, #48]	@ (8006e3c <UART_SetConfig+0x118>)
 8006e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	2064      	movs	r0, #100	@ 0x64
 8006e12:	fb00 f303 	mul.w	r3, r0, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	3332      	adds	r3, #50	@ 0x32
 8006e1c:	4a07      	ldr	r2, [pc, #28]	@ (8006e3c <UART_SetConfig+0x118>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	51eb851f 	.word	0x51eb851f

08006e40 <malloc>:
 8006e40:	4b02      	ldr	r3, [pc, #8]	@ (8006e4c <malloc+0xc>)
 8006e42:	4601      	mov	r1, r0
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f000 b82d 	b.w	8006ea4 <_malloc_r>
 8006e4a:	bf00      	nop
 8006e4c:	20000010 	.word	0x20000010

08006e50 <free>:
 8006e50:	4b02      	ldr	r3, [pc, #8]	@ (8006e5c <free+0xc>)
 8006e52:	4601      	mov	r1, r0
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	f000 b8f5 	b.w	8007044 <_free_r>
 8006e5a:	bf00      	nop
 8006e5c:	20000010 	.word	0x20000010

08006e60 <sbrk_aligned>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	4e0f      	ldr	r6, [pc, #60]	@ (8006ea0 <sbrk_aligned+0x40>)
 8006e64:	460c      	mov	r4, r1
 8006e66:	6831      	ldr	r1, [r6, #0]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	b911      	cbnz	r1, 8006e72 <sbrk_aligned+0x12>
 8006e6c:	f000 f8ae 	bl	8006fcc <_sbrk_r>
 8006e70:	6030      	str	r0, [r6, #0]
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f8a9 	bl	8006fcc <_sbrk_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	d103      	bne.n	8006e86 <sbrk_aligned+0x26>
 8006e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e82:	4620      	mov	r0, r4
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
 8006e86:	1cc4      	adds	r4, r0, #3
 8006e88:	f024 0403 	bic.w	r4, r4, #3
 8006e8c:	42a0      	cmp	r0, r4
 8006e8e:	d0f8      	beq.n	8006e82 <sbrk_aligned+0x22>
 8006e90:	1a21      	subs	r1, r4, r0
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f89a 	bl	8006fcc <_sbrk_r>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d1f2      	bne.n	8006e82 <sbrk_aligned+0x22>
 8006e9c:	e7ef      	b.n	8006e7e <sbrk_aligned+0x1e>
 8006e9e:	bf00      	nop
 8006ea0:	200004f8 	.word	0x200004f8

08006ea4 <_malloc_r>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	1ccd      	adds	r5, r1, #3
 8006eaa:	f025 0503 	bic.w	r5, r5, #3
 8006eae:	3508      	adds	r5, #8
 8006eb0:	2d0c      	cmp	r5, #12
 8006eb2:	bf38      	it	cc
 8006eb4:	250c      	movcc	r5, #12
 8006eb6:	2d00      	cmp	r5, #0
 8006eb8:	4606      	mov	r6, r0
 8006eba:	db01      	blt.n	8006ec0 <_malloc_r+0x1c>
 8006ebc:	42a9      	cmp	r1, r5
 8006ebe:	d904      	bls.n	8006eca <_malloc_r+0x26>
 8006ec0:	230c      	movs	r3, #12
 8006ec2:	6033      	str	r3, [r6, #0]
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fa0 <_malloc_r+0xfc>
 8006ece:	f000 f869 	bl	8006fa4 <__malloc_lock>
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	461c      	mov	r4, r3
 8006ed8:	bb44      	cbnz	r4, 8006f2c <_malloc_r+0x88>
 8006eda:	4629      	mov	r1, r5
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7ff ffbf 	bl	8006e60 <sbrk_aligned>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	d158      	bne.n	8006f9a <_malloc_r+0xf6>
 8006ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8006eec:	4627      	mov	r7, r4
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	d143      	bne.n	8006f7a <_malloc_r+0xd6>
 8006ef2:	2c00      	cmp	r4, #0
 8006ef4:	d04b      	beq.n	8006f8e <_malloc_r+0xea>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	4639      	mov	r1, r7
 8006efa:	4630      	mov	r0, r6
 8006efc:	eb04 0903 	add.w	r9, r4, r3
 8006f00:	f000 f864 	bl	8006fcc <_sbrk_r>
 8006f04:	4581      	cmp	r9, r0
 8006f06:	d142      	bne.n	8006f8e <_malloc_r+0xea>
 8006f08:	6821      	ldr	r1, [r4, #0]
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	1a6d      	subs	r5, r5, r1
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7ff ffa6 	bl	8006e60 <sbrk_aligned>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d03a      	beq.n	8006f8e <_malloc_r+0xea>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	442b      	add	r3, r5
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	bb62      	cbnz	r2, 8006f80 <_malloc_r+0xdc>
 8006f26:	f8c8 7000 	str.w	r7, [r8]
 8006f2a:	e00f      	b.n	8006f4c <_malloc_r+0xa8>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	1b52      	subs	r2, r2, r5
 8006f30:	d420      	bmi.n	8006f74 <_malloc_r+0xd0>
 8006f32:	2a0b      	cmp	r2, #11
 8006f34:	d917      	bls.n	8006f66 <_malloc_r+0xc2>
 8006f36:	1961      	adds	r1, r4, r5
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	6025      	str	r5, [r4, #0]
 8006f3c:	bf18      	it	ne
 8006f3e:	6059      	strne	r1, [r3, #4]
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	bf08      	it	eq
 8006f44:	f8c8 1000 	streq.w	r1, [r8]
 8006f48:	5162      	str	r2, [r4, r5]
 8006f4a:	604b      	str	r3, [r1, #4]
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 f82f 	bl	8006fb0 <__malloc_unlock>
 8006f52:	f104 000b 	add.w	r0, r4, #11
 8006f56:	1d23      	adds	r3, r4, #4
 8006f58:	f020 0007 	bic.w	r0, r0, #7
 8006f5c:	1ac2      	subs	r2, r0, r3
 8006f5e:	bf1c      	itt	ne
 8006f60:	1a1b      	subne	r3, r3, r0
 8006f62:	50a3      	strne	r3, [r4, r2]
 8006f64:	e7af      	b.n	8006ec6 <_malloc_r+0x22>
 8006f66:	6862      	ldr	r2, [r4, #4]
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	bf0c      	ite	eq
 8006f6c:	f8c8 2000 	streq.w	r2, [r8]
 8006f70:	605a      	strne	r2, [r3, #4]
 8006f72:	e7eb      	b.n	8006f4c <_malloc_r+0xa8>
 8006f74:	4623      	mov	r3, r4
 8006f76:	6864      	ldr	r4, [r4, #4]
 8006f78:	e7ae      	b.n	8006ed8 <_malloc_r+0x34>
 8006f7a:	463c      	mov	r4, r7
 8006f7c:	687f      	ldr	r7, [r7, #4]
 8006f7e:	e7b6      	b.n	8006eee <_malloc_r+0x4a>
 8006f80:	461a      	mov	r2, r3
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d1fb      	bne.n	8006f80 <_malloc_r+0xdc>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	6053      	str	r3, [r2, #4]
 8006f8c:	e7de      	b.n	8006f4c <_malloc_r+0xa8>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	4630      	mov	r0, r6
 8006f92:	6033      	str	r3, [r6, #0]
 8006f94:	f000 f80c 	bl	8006fb0 <__malloc_unlock>
 8006f98:	e794      	b.n	8006ec4 <_malloc_r+0x20>
 8006f9a:	6005      	str	r5, [r0, #0]
 8006f9c:	e7d6      	b.n	8006f4c <_malloc_r+0xa8>
 8006f9e:	bf00      	nop
 8006fa0:	200004fc 	.word	0x200004fc

08006fa4 <__malloc_lock>:
 8006fa4:	4801      	ldr	r0, [pc, #4]	@ (8006fac <__malloc_lock+0x8>)
 8006fa6:	f000 b84b 	b.w	8007040 <__retarget_lock_acquire_recursive>
 8006faa:	bf00      	nop
 8006fac:	2000063c 	.word	0x2000063c

08006fb0 <__malloc_unlock>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	@ (8006fb8 <__malloc_unlock+0x8>)
 8006fb2:	f000 b846 	b.w	8007042 <__retarget_lock_release_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	2000063c 	.word	0x2000063c

08006fbc <memset>:
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4402      	add	r2, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <_sbrk_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4d05      	ldr	r5, [pc, #20]	@ (8006fe8 <_sbrk_r+0x1c>)
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fa f9ac 	bl	8001334 <_sbrk>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_sbrk_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_sbrk_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000638 	.word	0x20000638

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	@ (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000010 	.word	0x20000010

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	4d0c      	ldr	r5, [pc, #48]	@ (8007030 <__libc_init_array+0x38>)
 8006ffe:	4c0d      	ldr	r4, [pc, #52]	@ (8007034 <__libc_init_array+0x3c>)
 8007000:	1b64      	subs	r4, r4, r5
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	42a6      	cmp	r6, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	f000 f864 	bl	80070d4 <_init>
 800700c:	2600      	movs	r6, #0
 800700e:	4d0a      	ldr	r5, [pc, #40]	@ (8007038 <__libc_init_array+0x40>)
 8007010:	4c0a      	ldr	r4, [pc, #40]	@ (800703c <__libc_init_array+0x44>)
 8007012:	1b64      	subs	r4, r4, r5
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	42a6      	cmp	r6, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007020:	4798      	blx	r3
 8007022:	3601      	adds	r6, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f855 3b04 	ldr.w	r3, [r5], #4
 800702a:	4798      	blx	r3
 800702c:	3601      	adds	r6, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	08007118 	.word	0x08007118
 8007034:	08007118 	.word	0x08007118
 8007038:	08007118 	.word	0x08007118
 800703c:	0800711c 	.word	0x0800711c

08007040 <__retarget_lock_acquire_recursive>:
 8007040:	4770      	bx	lr

08007042 <__retarget_lock_release_recursive>:
 8007042:	4770      	bx	lr

08007044 <_free_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4605      	mov	r5, r0
 8007048:	2900      	cmp	r1, #0
 800704a:	d040      	beq.n	80070ce <_free_r+0x8a>
 800704c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007050:	1f0c      	subs	r4, r1, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfb8      	it	lt
 8007056:	18e4      	addlt	r4, r4, r3
 8007058:	f7ff ffa4 	bl	8006fa4 <__malloc_lock>
 800705c:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <_free_r+0x8c>)
 800705e:	6813      	ldr	r3, [r2, #0]
 8007060:	b933      	cbnz	r3, 8007070 <_free_r+0x2c>
 8007062:	6063      	str	r3, [r4, #4]
 8007064:	6014      	str	r4, [r2, #0]
 8007066:	4628      	mov	r0, r5
 8007068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800706c:	f7ff bfa0 	b.w	8006fb0 <__malloc_unlock>
 8007070:	42a3      	cmp	r3, r4
 8007072:	d908      	bls.n	8007086 <_free_r+0x42>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	1821      	adds	r1, r4, r0
 8007078:	428b      	cmp	r3, r1
 800707a:	bf01      	itttt	eq
 800707c:	6819      	ldreq	r1, [r3, #0]
 800707e:	685b      	ldreq	r3, [r3, #4]
 8007080:	1809      	addeq	r1, r1, r0
 8007082:	6021      	streq	r1, [r4, #0]
 8007084:	e7ed      	b.n	8007062 <_free_r+0x1e>
 8007086:	461a      	mov	r2, r3
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	b10b      	cbz	r3, 8007090 <_free_r+0x4c>
 800708c:	42a3      	cmp	r3, r4
 800708e:	d9fa      	bls.n	8007086 <_free_r+0x42>
 8007090:	6811      	ldr	r1, [r2, #0]
 8007092:	1850      	adds	r0, r2, r1
 8007094:	42a0      	cmp	r0, r4
 8007096:	d10b      	bne.n	80070b0 <_free_r+0x6c>
 8007098:	6820      	ldr	r0, [r4, #0]
 800709a:	4401      	add	r1, r0
 800709c:	1850      	adds	r0, r2, r1
 800709e:	4283      	cmp	r3, r0
 80070a0:	6011      	str	r1, [r2, #0]
 80070a2:	d1e0      	bne.n	8007066 <_free_r+0x22>
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	4408      	add	r0, r1
 80070aa:	6010      	str	r0, [r2, #0]
 80070ac:	6053      	str	r3, [r2, #4]
 80070ae:	e7da      	b.n	8007066 <_free_r+0x22>
 80070b0:	d902      	bls.n	80070b8 <_free_r+0x74>
 80070b2:	230c      	movs	r3, #12
 80070b4:	602b      	str	r3, [r5, #0]
 80070b6:	e7d6      	b.n	8007066 <_free_r+0x22>
 80070b8:	6820      	ldr	r0, [r4, #0]
 80070ba:	1821      	adds	r1, r4, r0
 80070bc:	428b      	cmp	r3, r1
 80070be:	bf01      	itttt	eq
 80070c0:	6819      	ldreq	r1, [r3, #0]
 80070c2:	685b      	ldreq	r3, [r3, #4]
 80070c4:	1809      	addeq	r1, r1, r0
 80070c6:	6021      	streq	r1, [r4, #0]
 80070c8:	6063      	str	r3, [r4, #4]
 80070ca:	6054      	str	r4, [r2, #4]
 80070cc:	e7cb      	b.n	8007066 <_free_r+0x22>
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	200004fc 	.word	0x200004fc

080070d4 <_init>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr

080070e0 <_fini>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr
